
Homework5a_UART_LCD_IT_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003764  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080038f8  080038f8  000048f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800392c  0800392c  00005034  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800392c  0800392c  0000492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003934  08003934  00005034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003934  08003934  00004934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003938  08003938  00004938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  0800393c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000034  08003970  00005034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003970  0000511c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a9f  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001877  00000000  00000000  0000db03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0000f380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b0  00000000  00000000  0000faf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001591d  00000000  00000000  000100a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009169  00000000  00000000  000259c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000851d6  00000000  00000000  0002eb2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3d04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d50  00000000  00000000  000b3d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000b5a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000034 	.word	0x20000034
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080038e0 	.word	0x080038e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000038 	.word	0x20000038
 80001d0:	080038e0 	.word	0x080038e0

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b988 	b.w	800050c <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	468e      	mov	lr, r1
 800021c:	4604      	mov	r4, r0
 800021e:	4688      	mov	r8, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14a      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d962      	bls.n	80002f0 <__udivmoddi4+0xdc>
 800022a:	fab2 f682 	clz	r6, r2
 800022e:	b14e      	cbz	r6, 8000244 <__udivmoddi4+0x30>
 8000230:	f1c6 0320 	rsb	r3, r6, #32
 8000234:	fa01 f806 	lsl.w	r8, r1, r6
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	40b7      	lsls	r7, r6
 800023e:	ea43 0808 	orr.w	r8, r3, r8
 8000242:	40b4      	lsls	r4, r6
 8000244:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000248:	fa1f fc87 	uxth.w	ip, r7
 800024c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000250:	0c23      	lsrs	r3, r4, #16
 8000252:	fb0e 8811 	mls	r8, lr, r1, r8
 8000256:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025a:	fb01 f20c 	mul.w	r2, r1, ip
 800025e:	429a      	cmp	r2, r3
 8000260:	d909      	bls.n	8000276 <__udivmoddi4+0x62>
 8000262:	18fb      	adds	r3, r7, r3
 8000264:	f101 30ff 	add.w	r0, r1, #4294967295
 8000268:	f080 80ea 	bcs.w	8000440 <__udivmoddi4+0x22c>
 800026c:	429a      	cmp	r2, r3
 800026e:	f240 80e7 	bls.w	8000440 <__udivmoddi4+0x22c>
 8000272:	3902      	subs	r1, #2
 8000274:	443b      	add	r3, r7
 8000276:	1a9a      	subs	r2, r3, r2
 8000278:	b2a3      	uxth	r3, r4
 800027a:	fbb2 f0fe 	udiv	r0, r2, lr
 800027e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000286:	fb00 fc0c 	mul.w	ip, r0, ip
 800028a:	459c      	cmp	ip, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x8e>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f100 32ff 	add.w	r2, r0, #4294967295
 8000294:	f080 80d6 	bcs.w	8000444 <__udivmoddi4+0x230>
 8000298:	459c      	cmp	ip, r3
 800029a:	f240 80d3 	bls.w	8000444 <__udivmoddi4+0x230>
 800029e:	443b      	add	r3, r7
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a6:	eba3 030c 	sub.w	r3, r3, ip
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa2>
 80002ae:	40f3      	lsrs	r3, r6
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xb6>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb0>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x14c>
 80002d2:	4573      	cmp	r3, lr
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xc8>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 8105 	bhi.w	80004e6 <__udivmoddi4+0x2d2>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4690      	mov	r8, r2
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e5      	beq.n	80002b6 <__udivmoddi4+0xa2>
 80002ea:	e9c5 4800 	strd	r4, r8, [r5]
 80002ee:	e7e2      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f000 8090 	beq.w	8000416 <__udivmoddi4+0x202>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f040 80a4 	bne.w	8000448 <__udivmoddi4+0x234>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	0c03      	lsrs	r3, r0, #16
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	b280      	uxth	r0, r0
 800030a:	b2bc      	uxth	r4, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000312:	fb0e 221c 	mls	r2, lr, ip, r2
 8000316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031a:	fb04 f20c 	mul.w	r2, r4, ip
 800031e:	429a      	cmp	r2, r3
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x11e>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x11c>
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 80e0 	bhi.w	80004f0 <__udivmoddi4+0x2dc>
 8000330:	46c4      	mov	ip, r8
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	fbb3 f2fe 	udiv	r2, r3, lr
 8000338:	fb0e 3312 	mls	r3, lr, r2, r3
 800033c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000340:	fb02 f404 	mul.w	r4, r2, r4
 8000344:	429c      	cmp	r4, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x144>
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	f102 30ff 	add.w	r0, r2, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x142>
 8000350:	429c      	cmp	r4, r3
 8000352:	f200 80ca 	bhi.w	80004ea <__udivmoddi4+0x2d6>
 8000356:	4602      	mov	r2, r0
 8000358:	1b1b      	subs	r3, r3, r4
 800035a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x98>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa0e f401 	lsl.w	r4, lr, r1
 8000370:	fa20 f306 	lsr.w	r3, r0, r6
 8000374:	fa2e fe06 	lsr.w	lr, lr, r6
 8000378:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fa00 f801 	lsl.w	r8, r0, r1
 8000382:	fa1f fc87 	uxth.w	ip, r7
 8000386:	fbbe f0f9 	udiv	r0, lr, r9
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000390:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000394:	fb00 fe0c 	mul.w	lr, r0, ip
 8000398:	45a6      	cmp	lr, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1a0>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a6:	f080 809c 	bcs.w	80004e2 <__udivmoddi4+0x2ce>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f240 8099 	bls.w	80004e2 <__udivmoddi4+0x2ce>
 80003b0:	3802      	subs	r0, #2
 80003b2:	443c      	add	r4, r7
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	fa1f fe83 	uxth.w	lr, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003cc:	45a4      	cmp	ip, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1ce>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d6:	f080 8082 	bcs.w	80004de <__udivmoddi4+0x2ca>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d97f      	bls.n	80004de <__udivmoddi4+0x2ca>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e6:	eba4 040c 	sub.w	r4, r4, ip
 80003ea:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ee:	4564      	cmp	r4, ip
 80003f0:	4673      	mov	r3, lr
 80003f2:	46e1      	mov	r9, ip
 80003f4:	d362      	bcc.n	80004bc <__udivmoddi4+0x2a8>
 80003f6:	d05f      	beq.n	80004b8 <__udivmoddi4+0x2a4>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x1fe>
 80003fa:	ebb8 0203 	subs.w	r2, r8, r3
 80003fe:	eb64 0409 	sbc.w	r4, r4, r9
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	fa22 f301 	lsr.w	r3, r2, r1
 800040a:	431e      	orrs	r6, r3
 800040c:	40cc      	lsrs	r4, r1
 800040e:	e9c5 6400 	strd	r6, r4, [r5]
 8000412:	2100      	movs	r1, #0
 8000414:	e74f      	b.n	80002b6 <__udivmoddi4+0xa2>
 8000416:	fbb1 fcf2 	udiv	ip, r1, r2
 800041a:	0c01      	lsrs	r1, r0, #16
 800041c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000420:	b280      	uxth	r0, r0
 8000422:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000426:	463b      	mov	r3, r7
 8000428:	4638      	mov	r0, r7
 800042a:	463c      	mov	r4, r7
 800042c:	46b8      	mov	r8, r7
 800042e:	46be      	mov	lr, r7
 8000430:	2620      	movs	r6, #32
 8000432:	fbb1 f1f7 	udiv	r1, r1, r7
 8000436:	eba2 0208 	sub.w	r2, r2, r8
 800043a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043e:	e766      	b.n	800030e <__udivmoddi4+0xfa>
 8000440:	4601      	mov	r1, r0
 8000442:	e718      	b.n	8000276 <__udivmoddi4+0x62>
 8000444:	4610      	mov	r0, r2
 8000446:	e72c      	b.n	80002a2 <__udivmoddi4+0x8e>
 8000448:	f1c6 0220 	rsb	r2, r6, #32
 800044c:	fa2e f302 	lsr.w	r3, lr, r2
 8000450:	40b7      	lsls	r7, r6
 8000452:	40b1      	lsls	r1, r6
 8000454:	fa20 f202 	lsr.w	r2, r0, r2
 8000458:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800045c:	430a      	orrs	r2, r1
 800045e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000462:	b2bc      	uxth	r4, r7
 8000464:	fb0e 3318 	mls	r3, lr, r8, r3
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb08 f904 	mul.w	r9, r8, r4
 8000472:	40b0      	lsls	r0, r6
 8000474:	4589      	cmp	r9, r1
 8000476:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047a:	b280      	uxth	r0, r0
 800047c:	d93e      	bls.n	80004fc <__udivmoddi4+0x2e8>
 800047e:	1879      	adds	r1, r7, r1
 8000480:	f108 3cff 	add.w	ip, r8, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x276>
 8000486:	4589      	cmp	r9, r1
 8000488:	d81f      	bhi.n	80004ca <__udivmoddi4+0x2b6>
 800048a:	eba1 0109 	sub.w	r1, r1, r9
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fb09 f804 	mul.w	r8, r9, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	b292      	uxth	r2, r2
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d229      	bcs.n	80004f8 <__udivmoddi4+0x2e4>
 80004a4:	18ba      	adds	r2, r7, r2
 80004a6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004aa:	d2c4      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d2c2      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004b0:	f1a9 0102 	sub.w	r1, r9, #2
 80004b4:	443a      	add	r2, r7
 80004b6:	e7be      	b.n	8000436 <__udivmoddi4+0x222>
 80004b8:	45f0      	cmp	r8, lr
 80004ba:	d29d      	bcs.n	80003f8 <__udivmoddi4+0x1e4>
 80004bc:	ebbe 0302 	subs.w	r3, lr, r2
 80004c0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c4:	3801      	subs	r0, #1
 80004c6:	46e1      	mov	r9, ip
 80004c8:	e796      	b.n	80003f8 <__udivmoddi4+0x1e4>
 80004ca:	eba7 0909 	sub.w	r9, r7, r9
 80004ce:	4449      	add	r1, r9
 80004d0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d8:	fb09 f804 	mul.w	r8, r9, r4
 80004dc:	e7db      	b.n	8000496 <__udivmoddi4+0x282>
 80004de:	4673      	mov	r3, lr
 80004e0:	e77f      	b.n	80003e2 <__udivmoddi4+0x1ce>
 80004e2:	4650      	mov	r0, sl
 80004e4:	e766      	b.n	80003b4 <__udivmoddi4+0x1a0>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e6fd      	b.n	80002e6 <__udivmoddi4+0xd2>
 80004ea:	443b      	add	r3, r7
 80004ec:	3a02      	subs	r2, #2
 80004ee:	e733      	b.n	8000358 <__udivmoddi4+0x144>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	443b      	add	r3, r7
 80004f6:	e71c      	b.n	8000332 <__udivmoddi4+0x11e>
 80004f8:	4649      	mov	r1, r9
 80004fa:	e79c      	b.n	8000436 <__udivmoddi4+0x222>
 80004fc:	eba1 0109 	sub.w	r1, r1, r9
 8000500:	46c4      	mov	ip, r8
 8000502:	fbb1 f9fe 	udiv	r9, r1, lr
 8000506:	fb09 f804 	mul.w	r8, r9, r4
 800050a:	e7c4      	b.n	8000496 <__udivmoddi4+0x282>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000514:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <DWT_Delay_Init+0x58>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	4a13      	ldr	r2, [pc, #76]	@ (8000568 <DWT_Delay_Init+0x58>)
 800051a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800051e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000520:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <DWT_Delay_Init+0x58>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	4a10      	ldr	r2, [pc, #64]	@ (8000568 <DWT_Delay_Init+0x58>)
 8000526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800052a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800052c:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <DWT_Delay_Init+0x5c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0e      	ldr	r2, [pc, #56]	@ (800056c <DWT_Delay_Init+0x5c>)
 8000532:	f023 0301 	bic.w	r3, r3, #1
 8000536:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <DWT_Delay_Init+0x5c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0b      	ldr	r2, [pc, #44]	@ (800056c <DWT_Delay_Init+0x5c>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <DWT_Delay_Init+0x5c>)
 8000546:	2200      	movs	r2, #0
 8000548:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800054a:	bf00      	nop
    __ASM volatile ("NOP");
 800054c:	bf00      	nop
    __ASM volatile ("NOP");
 800054e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <DWT_Delay_Init+0x5c>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000558:	2300      	movs	r3, #0
 800055a:	e000      	b.n	800055e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800055c:	2301      	movs	r3, #1
    }
}
 800055e:	4618      	mov	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	e000edf0 	.word	0xe000edf0
 800056c:	e0001000 	.word	0xe0001000

08000570 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000578:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <DWT_Delay_us+0x48>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 800057e:	f002 f84b 	bl	8002618 <HAL_RCC_GetHCLKFreq>
 8000582:	4603      	mov	r3, r0
 8000584:	4a0d      	ldr	r2, [pc, #52]	@ (80005bc <DWT_Delay_us+0x4c>)
 8000586:	fba2 2303 	umull	r2, r3, r2, r3
 800058a:	0c9b      	lsrs	r3, r3, #18
 800058c:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	fb02 f303 	mul.w	r3, r2, r3
 8000596:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000598:	bf00      	nop
 800059a:	4b07      	ldr	r3, [pc, #28]	@ (80005b8 <DWT_Delay_us+0x48>)
 800059c:	685a      	ldr	r2, [r3, #4]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	1ad2      	subs	r2, r2, r3
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	1acb      	subs	r3, r1, r3
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d3f6      	bcc.n	800059a <DWT_Delay_us+0x2a>
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	e0001000 	.word	0xe0001000
 80005bc:	431bde83 	.word	0x431bde83

080005c0 <lcd_enable>:


//  LCD code


void lcd_enable(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 80005c4:	2201      	movs	r2, #1
 80005c6:	2102      	movs	r1, #2
 80005c8:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <lcd_enable+0x28>)
 80005ca:	f001 fba7 	bl	8001d1c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 80005ce:	2032      	movs	r0, #50	@ 0x32
 80005d0:	f7ff ffce 	bl	8000570 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2102      	movs	r1, #2
 80005d8:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <lcd_enable+0x28>)
 80005da:	f001 fb9f 	bl	8001d1c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 80005de:	2032      	movs	r0, #50	@ 0x32
 80005e0:	f7ff ffc6 	bl	8000570 <DWT_Delay_us>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40020400 	.word	0x40020400

080005ec <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000604:	4816      	ldr	r0, [pc, #88]	@ (8000660 <lcd_write4+0x74>)
 8000606:	f001 fb89 	bl	8001d1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	105b      	asrs	r3, r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800061c:	4810      	ldr	r0, [pc, #64]	@ (8000660 <lcd_write4+0x74>)
 800061e:	f001 fb7d 	bl	8001d1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	109b      	asrs	r3, r3, #2
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000634:	480a      	ldr	r0, [pc, #40]	@ (8000660 <lcd_write4+0x74>)
 8000636:	f001 fb71 	bl	8001d1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	10db      	asrs	r3, r3, #3
 800063e:	b2db      	uxtb	r3, r3
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <lcd_write4+0x74>)
 800064e:	f001 fb65 	bl	8001d1c <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 8000652:	f7ff ffb5 	bl	80005c0 <lcd_enable>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020400 	.word	0x40020400

08000664 <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	091b      	lsrs	r3, r3, #4
 8000672:	b2db      	uxtb	r3, r3
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ffb9 	bl	80005ec <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ffb5 	bl	80005ec <lcd_write4>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 8000696:	2200      	movs	r2, #0
 8000698:	2104      	movs	r1, #4
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <lcd_command+0x24>)
 800069c:	f001 fb3e 	bl	8001d1c <HAL_GPIO_WritePin>
	lcd_write(byte);
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ffde 	bl	8000664 <lcd_write>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40020400 	.word	0x40020400

080006b4 <lcd_clear>:

void lcd_clear(){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	lcd_command(LCD_CLEAR_COMMAND);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff ffe7 	bl	800068c <lcd_command>
	DWT_Delay_us(2000);
 80006be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006c2:	f7ff ff55 	bl	8000570 <DWT_Delay_us>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <lcd_data>:

//  send data to the LCD
void lcd_data(uint8_t byte){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 80006d6:	2201      	movs	r2, #1
 80006d8:	2104      	movs	r1, #4
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <lcd_data+0x24>)
 80006dc:	f001 fb1e 	bl	8001d1c <HAL_GPIO_WritePin>
	lcd_write(byte);
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ffbe 	bl	8000664 <lcd_write>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40020400 	.word	0x40020400

080006f4 <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	460a      	mov	r2, r1
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	4613      	mov	r3, r2
 8000702:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	3301      	adds	r3, #1
 8000708:	79ba      	ldrb	r2, [r7, #6]
 800070a:	3201      	adds	r2, #1
 800070c:	fb02 f303 	mul.w	r3, r2, r3
 8000710:	2b4f      	cmp	r3, #79	@ 0x4f
 8000712:	dc10      	bgt.n	8000736 <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	461a      	mov	r2, r3
 8000718:	0092      	lsls	r2, r2, #2
 800071a:	4413      	add	r3, r2
 800071c:	00db      	lsls	r3, r3, #3
 800071e:	b2da      	uxtb	r2, r3
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	4413      	add	r3, r2
 8000724:	b2db      	uxtb	r3, r3
 8000726:	b25b      	sxtb	r3, r3
 8000728:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800072c:	b25b      	sxtb	r3, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ffab 	bl	800068c <lcd_command>
	}
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff fd44 	bl	80001d4 <strlen>
 800074c:	4603      	mov	r3, r0
 800074e:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 8000750:	e006      	b.n	8000760 <lcd_print+0x22>
		lcd_data(*string++);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	1c5a      	adds	r2, r3, #1
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffb6 	bl	80006cc <lcd_data>
	while (size--){
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	1e5a      	subs	r2, r3, #1
 8000764:	60fa      	str	r2, [r7, #12]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1f3      	bne.n	8000752 <lcd_print+0x14>
	}
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <lcd_println>:

void lcd_println(char string[], uint8_t row){
 8000774:	b5b0      	push	{r4, r5, r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 8000780:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <lcd_println+0x6c>)
 8000782:	f107 0408 	add.w	r4, r7, #8
 8000786:	461d      	mov	r5, r3
 8000788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078c:	682b      	ldr	r3, [r5, #0]
 800078e:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff fd1f 	bl	80001d4 <strlen>
 8000796:	4603      	mov	r3, r0
 8000798:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	2b10      	cmp	r3, #16
 800079e:	dd0c      	ble.n	80007ba <lcd_println+0x46>
		size = 16;
 80007a0:	2310      	movs	r3, #16
 80007a2:	61fb      	str	r3, [r7, #28]

	while (size--){
 80007a4:	e009      	b.n	80007ba <lcd_println+0x46>
		line[size] = string[size];
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	4413      	add	r3, r2
 80007ac:	7819      	ldrb	r1, [r3, #0]
 80007ae:	f107 0208 	add.w	r2, r7, #8
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	4413      	add	r3, r2
 80007b6:	460a      	mov	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
	while (size--){
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	61fa      	str	r2, [r7, #28]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1f0      	bne.n	80007a6 <lcd_println+0x32>
	}
	setCursor(0, row);
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	4619      	mov	r1, r3
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff ff93 	bl	80006f4 <setCursor>
	lcd_print(line);
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ffb3 	bl	800073e <lcd_print>
}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bdb0      	pop	{r4, r5, r7, pc}
 80007e0:	080038f8 	.word	0x080038f8

080007e4 <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	6039      	str	r1, [r7, #0]
 80007ee:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000804:	b25b      	sxtb	r3, r3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff3f 	bl	800068c <lcd_command>
	for (int i = 0; i<8; i++){
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	e009      	b.n	8000828 <writeCustomChar+0x44>
		lcd_data(map[i]);	
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff55 	bl	80006cc <lcd_data>
	for (int i = 0; i<8; i++){
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3301      	adds	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	2b07      	cmp	r3, #7
 800082c:	ddf2      	ble.n	8000814 <writeCustomChar+0x30>
	}
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 800083c:	490a      	ldr	r1, [pc, #40]	@ (8000868 <loadCustomChars+0x30>)
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff ffd0 	bl	80007e4 <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 8000844:	4909      	ldr	r1, [pc, #36]	@ (800086c <loadCustomChars+0x34>)
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff ffcc 	bl	80007e4 <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 800084c:	4908      	ldr	r1, [pc, #32]	@ (8000870 <loadCustomChars+0x38>)
 800084e:	2003      	movs	r0, #3
 8000850:	f7ff ffc8 	bl	80007e4 <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 8000854:	4907      	ldr	r1, [pc, #28]	@ (8000874 <loadCustomChars+0x3c>)
 8000856:	2004      	movs	r0, #4
 8000858:	f7ff ffc4 	bl	80007e4 <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 800085c:	4906      	ldr	r1, [pc, #24]	@ (8000878 <loadCustomChars+0x40>)
 800085e:	2005      	movs	r0, #5
 8000860:	f7ff ffc0 	bl	80007e4 <writeCustomChar>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000000 	.word	0x20000000
 800086c:	20000008 	.word	0x20000008
 8000870:	20000010 	.word	0x20000010
 8000874:	20000018 	.word	0x20000018
 8000878:	20000020 	.word	0x20000020

0800087c <lcd_initialize>:
		i++;
	}
	lcd_print(bar); //finally we write to the LCD
}

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 8000880:	2032      	movs	r0, #50	@ 0x32
 8000882:	f000 fb8f 	bl	8000fa4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2104      	movs	r1, #4
 800088a:	4824      	ldr	r0, [pc, #144]	@ (800091c <lcd_initialize+0xa0>)
 800088c:	f001 fa46 	bl	8001d1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2102      	movs	r1, #2
 8000894:	4821      	ldr	r0, [pc, #132]	@ (800091c <lcd_initialize+0xa0>)
 8000896:	f001 fa41 	bl	8001d1c <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 800089a:	f7ff fe39 	bl	8000510 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 800089e:	2003      	movs	r0, #3
 80008a0:	f7ff fea4 	bl	80005ec <lcd_write4>
	HAL_Delay(5);
 80008a4:	2005      	movs	r0, #5
 80008a6:	f000 fb7d 	bl	8000fa4 <HAL_Delay>
	lcd_write4(0x03);
 80008aa:	2003      	movs	r0, #3
 80008ac:	f7ff fe9e 	bl	80005ec <lcd_write4>
	HAL_Delay(5);
 80008b0:	2005      	movs	r0, #5
 80008b2:	f000 fb77 	bl	8000fa4 <HAL_Delay>
	lcd_write4(0x03);
 80008b6:	2003      	movs	r0, #3
 80008b8:	f7ff fe98 	bl	80005ec <lcd_write4>
	HAL_Delay(5);
 80008bc:	2005      	movs	r0, #5
 80008be:	f000 fb71 	bl	8000fa4 <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 80008c2:	2002      	movs	r0, #2
 80008c4:	f7ff fe92 	bl	80005ec <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 80008c8:	2028      	movs	r0, #40	@ 0x28
 80008ca:	f7ff fecb 	bl	8000664 <lcd_write>
	HAL_Delay(5);
 80008ce:	2005      	movs	r0, #5
 80008d0:	f000 fb68 	bl	8000fa4 <HAL_Delay>
	lcd_write(0x08); //display off;
 80008d4:	2008      	movs	r0, #8
 80008d6:	f7ff fec5 	bl	8000664 <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 80008da:	2001      	movs	r0, #1
 80008dc:	f7ff fec2 	bl	8000664 <lcd_write>
	HAL_Delay(5);
 80008e0:	2005      	movs	r0, #5
 80008e2:	f000 fb5f 	bl	8000fa4 <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 80008e6:	2006      	movs	r0, #6
 80008e8:	f7ff febc 	bl	8000664 <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 80008ec:	2201      	movs	r2, #1
 80008ee:	2110      	movs	r1, #16
 80008f0:	480b      	ldr	r0, [pc, #44]	@ (8000920 <lcd_initialize+0xa4>)
 80008f2:	f001 fa13 	bl	8001d1c <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <lcd_initialize+0xa8>)
 80008f8:	220c      	movs	r2, #12
 80008fa:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 80008fc:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <lcd_initialize+0xa8>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff feaf 	bl	8000664 <lcd_write>
	lcd_write(0x02); //go home
 8000906:	2002      	movs	r0, #2
 8000908:	f7ff feac 	bl	8000664 <lcd_write>
	HAL_Delay(2);
 800090c:	2002      	movs	r0, #2
 800090e:	f000 fb49 	bl	8000fa4 <HAL_Delay>
	loadCustomChars();
 8000912:	f7ff ff91 	bl	8000838 <loadCustomChars>

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40020400 	.word	0x40020400
 8000920:	40020000 	.word	0x40020000
 8000924:	20000050 	.word	0x20000050

08000928 <lcd_backlight_ON>:

void lcd_backlight_ON(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2110      	movs	r1, #16
 8000930:	4802      	ldr	r0, [pc, #8]	@ (800093c <lcd_backlight_ON+0x14>)
 8000932:	f001 f9f3 	bl	8001d1c <HAL_GPIO_WritePin>
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40020000 	.word	0x40020000

08000940 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//This callback is activated when the receiving is complete
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart){
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){ 				//checking if the interrupt is generated by the port 2
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a14      	ldr	r2, [pc, #80]	@ (800099c <HAL_UART_RxCpltCallback+0x5c>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d120      	bne.n	8000992 <HAL_UART_RxCpltCallback+0x52>
		string_rx[i] = curr_c; 			//attaching the char to the string
 8000950:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <HAL_UART_RxCpltCallback+0x60>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a13      	ldr	r2, [pc, #76]	@ (80009a4 <HAL_UART_RxCpltCallback+0x64>)
 8000956:	7811      	ldrb	r1, [r2, #0]
 8000958:	4a13      	ldr	r2, [pc, #76]	@ (80009a8 <HAL_UART_RxCpltCallback+0x68>)
 800095a:	54d1      	strb	r1, [r2, r3]
		if (curr_c == '\n'){ 				//check if the char is a "new line" character
 800095c:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <HAL_UART_RxCpltCallback+0x64>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b0a      	cmp	r3, #10
 8000962:	d10c      	bne.n	800097e <HAL_UART_RxCpltCallback+0x3e>
			string_rx[i]= '\0'; 		// attaching the terminator
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <HAL_UART_RxCpltCallback+0x60>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <HAL_UART_RxCpltCallback+0x68>)
 800096a:	2100      	movs	r1, #0
 800096c:	54d1      	strb	r1, [r2, r3]
			lcd_println(string_rx, 0);
 800096e:	2100      	movs	r1, #0
 8000970:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <HAL_UART_RxCpltCallback+0x68>)
 8000972:	f7ff feff 	bl	8000774 <lcd_println>
			i=0; 						//ready for a new string
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <HAL_UART_RxCpltCallback+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	e004      	b.n	8000988 <HAL_UART_RxCpltCallback+0x48>
		}else{
			i++; 						// ready for a new char for the same string
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <HAL_UART_RxCpltCallback+0x60>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3301      	adds	r3, #1
 8000984:	4a06      	ldr	r2, [pc, #24]	@ (80009a0 <HAL_UART_RxCpltCallback+0x60>)
 8000986:	6013      	str	r3, [r2, #0]
		}
		HAL_UART_Receive_DMA(&huart2, &curr_c, 1); //receive the next character
 8000988:	2201      	movs	r2, #1
 800098a:	4906      	ldr	r1, [pc, #24]	@ (80009a4 <HAL_UART_RxCpltCallback+0x64>)
 800098c:	4803      	ldr	r0, [pc, #12]	@ (800099c <HAL_UART_RxCpltCallback+0x5c>)
 800098e:	f001 fec7 	bl	8002720 <HAL_UART_Receive_DMA>
	}
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000054 	.word	0x20000054
 80009a0:	20000114 	.word	0x20000114
 80009a4:	200000fc 	.word	0x200000fc
 80009a8:	20000100 	.word	0x20000100

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b0:	f000 fa86 	bl	8000ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f000 f818 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f000 f8cc 	bl	8000b54 <MX_GPIO_Init>
  MX_DMA_Init();
 80009bc:	f000 f8aa 	bl	8000b14 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009c0:	f000 f87e 	bl	8000ac0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //LCD initialization
  lcd_initialize();
 80009c4:	f7ff ff5a 	bl	800087c <lcd_initialize>
  lcd_backlight_ON();
 80009c8:	f7ff ffae 	bl	8000928 <lcd_backlight_ON>
  lcd_clear();
 80009cc:	f7ff fe72 	bl	80006b4 <lcd_clear>

  //first character received
   HAL_UART_Receive_DMA(&huart2, &curr_c, 1);
 80009d0:	2201      	movs	r2, #1
 80009d2:	4903      	ldr	r1, [pc, #12]	@ (80009e0 <main+0x34>)
 80009d4:	4803      	ldr	r0, [pc, #12]	@ (80009e4 <main+0x38>)
 80009d6:	f001 fea3 	bl	8002720 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009da:	bf00      	nop
 80009dc:	e7fd      	b.n	80009da <main+0x2e>
 80009de:	bf00      	nop
 80009e0:	200000fc 	.word	0x200000fc
 80009e4:	20000054 	.word	0x20000054

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b094      	sub	sp, #80	@ 0x50
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0320 	add.w	r3, r7, #32
 80009f2:	2230      	movs	r2, #48	@ 0x30
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 ff46 	bl	8003888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	4b29      	ldr	r3, [pc, #164]	@ (8000ab8 <SystemClock_Config+0xd0>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a14:	4a28      	ldr	r2, [pc, #160]	@ (8000ab8 <SystemClock_Config+0xd0>)
 8000a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1c:	4b26      	ldr	r3, [pc, #152]	@ (8000ab8 <SystemClock_Config+0xd0>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	4b23      	ldr	r3, [pc, #140]	@ (8000abc <SystemClock_Config+0xd4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a34:	4a21      	ldr	r2, [pc, #132]	@ (8000abc <SystemClock_Config+0xd4>)
 8000a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <SystemClock_Config+0xd4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a50:	2310      	movs	r3, #16
 8000a52:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a54:	2302      	movs	r3, #2
 8000a56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a60:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a64:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a66:	2304      	movs	r3, #4
 8000a68:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 f96c 	bl	8001d50 <HAL_RCC_OscConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a7e:	f000 f8ef 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a82:	230f      	movs	r3, #15
 8000a84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a86:	2302      	movs	r3, #2
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fbce 	bl	8002240 <HAL_RCC_ClockConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000aaa:	f000 f8d9 	bl	8000c60 <Error_Handler>
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3750      	adds	r7, #80	@ 0x50
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40007000 	.word	0x40007000

08000ac0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <MX_USART2_UART_Init+0x50>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af8:	f001 fdc2 	bl	8002680 <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b02:	f000 f8ad 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000054 	.word	0x20000054
 8000b10:	40004400 	.word	0x40004400

08000b14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_DMA_Init+0x3c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a0b      	ldr	r2, [pc, #44]	@ (8000b50 <MX_DMA_Init+0x3c>)
 8000b24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_DMA_Init+0x3c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2010      	movs	r0, #16
 8000b3c:	f000 fb31 	bl	80011a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b40:	2010      	movs	r0, #16
 8000b42:	f000 fb4a 	bl	80011da <HAL_NVIC_EnableIRQ>

}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b38      	ldr	r3, [pc, #224]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a37      	ldr	r2, [pc, #220]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b35      	ldr	r3, [pc, #212]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b31      	ldr	r3, [pc, #196]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a30      	ldr	r2, [pc, #192]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b2e      	ldr	r3, [pc, #184]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a29      	ldr	r2, [pc, #164]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b27      	ldr	r3, [pc, #156]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b23      	ldr	r3, [pc, #140]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a22      	ldr	r2, [pc, #136]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2130      	movs	r1, #48	@ 0x30
 8000bde:	481d      	ldr	r0, [pc, #116]	@ (8000c54 <MX_GPIO_Init+0x100>)
 8000be0:	f001 f89c 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000be4:	2200      	movs	r2, #0
 8000be6:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000bea:	481b      	ldr	r0, [pc, #108]	@ (8000c58 <MX_GPIO_Init+0x104>)
 8000bec:	f001 f896 	bl	8001d1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4815      	ldr	r0, [pc, #84]	@ (8000c5c <MX_GPIO_Init+0x108>)
 8000c08:	f000 ff04 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000c0c:	2330      	movs	r3, #48	@ 0x30
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <MX_GPIO_Init+0x100>)
 8000c24:	f000 fef6 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000c28:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000c2c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <MX_GPIO_Init+0x104>)
 8000c42:	f000 fee7 	bl	8001a14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	@ 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40020400 	.word	0x40020400
 8000c5c:	40020800 	.word	0x40020800

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <Error_Handler+0x8>

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	4a08      	ldr	r2, [pc, #32]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000caa:	2007      	movs	r0, #7
 8000cac:	f000 fa6e 	bl	800118c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800

08000cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a34      	ldr	r2, [pc, #208]	@ (8000dac <HAL_UART_MspInit+0xf0>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d161      	bne.n	8000da2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b33      	ldr	r3, [pc, #204]	@ (8000db0 <HAL_UART_MspInit+0xf4>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	4a32      	ldr	r2, [pc, #200]	@ (8000db0 <HAL_UART_MspInit+0xf4>)
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cee:	4b30      	ldr	r3, [pc, #192]	@ (8000db0 <HAL_UART_MspInit+0xf4>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000db0 <HAL_UART_MspInit+0xf4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a2b      	ldr	r2, [pc, #172]	@ (8000db0 <HAL_UART_MspInit+0xf4>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b29      	ldr	r3, [pc, #164]	@ (8000db0 <HAL_UART_MspInit+0xf4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d16:	230c      	movs	r3, #12
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d26:	2307      	movs	r3, #7
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4820      	ldr	r0, [pc, #128]	@ (8000db4 <HAL_UART_MspInit+0xf8>)
 8000d32:	f000 fe6f 	bl	8001a14 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d36:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d38:	4a20      	ldr	r2, [pc, #128]	@ (8000dbc <HAL_UART_MspInit+0x100>)
 8000d3a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d3e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d42:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d44:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d50:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d56:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d58:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d70:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d76:	4810      	ldr	r0, [pc, #64]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d78:	f000 fa4a 	bl	8001210 <HAL_DMA_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000d82:	f7ff ff6d 	bl	8000c60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a0b      	ldr	r2, [pc, #44]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	2026      	movs	r0, #38	@ 0x26
 8000d98:	f000 fa03 	bl	80011a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d9c:	2026      	movs	r0, #38	@ 0x26
 8000d9e:	f000 fa1c 	bl	80011da <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	@ 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40004400 	.word	0x40004400
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	2000009c 	.word	0x2000009c
 8000dbc:	40026088 	.word	0x40026088

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e16:	f000 f8a5 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e24:	4802      	ldr	r0, [pc, #8]	@ (8000e30 <DMA1_Stream5_IRQHandler+0x10>)
 8000e26:	f000 fb8b 	bl	8001540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000009c 	.word	0x2000009c

08000e34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <USART2_IRQHandler+0x10>)
 8000e3a:	f001 fc97 	bl	800276c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000054 	.word	0x20000054

08000e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <SystemInit+0x20>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e52:	4a05      	ldr	r2, [pc, #20]	@ (8000e68 <SystemInit+0x20>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e70:	f7ff ffea 	bl	8000e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480c      	ldr	r0, [pc, #48]	@ (8000ea8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e76:	490d      	ldr	r1, [pc, #52]	@ (8000eac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e78:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e9a:	f002 fcfd 	bl	8003898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9e:	f7ff fd85 	bl	80009ac <main>
  bx  lr    
 8000ea2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000eb0:	0800393c 	.word	0x0800393c
  ldr r2, =_sbss
 8000eb4:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000eb8:	2000011c 	.word	0x2000011c

08000ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC_IRQHandler>
	...

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f00 <HAL_Init+0x40>)
 8000eca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <HAL_Init+0x40>)
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	@ (8000f00 <HAL_Init+0x40>)
 8000ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f94f 	bl	800118c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff feba 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023c00 	.word	0x40023c00

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f967 	bl	80011f6 <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f000 f92f 	bl	80011a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	@ (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000028 	.word	0x20000028
 8000f5c:	20000030 	.word	0x20000030
 8000f60:	2000002c 	.word	0x2000002c

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000030 	.word	0x20000030
 8000f88:	20000118 	.word	0x20000118

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	@ (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000118 	.word	0x20000118

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff ffee 	bl	8000f8c <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <HAL_Delay+0x44>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffde 	bl	8000f8c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8f7      	bhi.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000030 	.word	0x20000030

08000fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001008:	4013      	ands	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001014:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800101c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101e:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	60d3      	str	r3, [r2, #12]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001038:	4b04      	ldr	r3, [pc, #16]	@ (800104c <__NVIC_GetPriorityGrouping+0x18>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	f003 0307 	and.w	r3, r3, #7
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	2b00      	cmp	r3, #0
 8001060:	db0b      	blt.n	800107a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f003 021f 	and.w	r2, r3, #31
 8001068:	4907      	ldr	r1, [pc, #28]	@ (8001088 <__NVIC_EnableIRQ+0x38>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	095b      	lsrs	r3, r3, #5
 8001070:	2001      	movs	r0, #1
 8001072:	fa00 f202 	lsl.w	r2, r0, r2
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000e100 	.word	0xe000e100

0800108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	@ (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	@ (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	@ 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
         );
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	@ 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001158:	d301      	bcc.n	800115e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115a:	2301      	movs	r3, #1
 800115c:	e00f      	b.n	800117e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115e:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <SysTick_Config+0x40>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001166:	210f      	movs	r1, #15
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f7ff ff8e 	bl	800108c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <SysTick_Config+0x40>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001176:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <SysTick_Config+0x40>)
 8001178:	2207      	movs	r2, #7
 800117a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	e000e010 	.word	0xe000e010

0800118c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff29 	bl	8000fec <__NVIC_SetPriorityGrouping>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff3e 	bl	8001034 <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff8e 	bl	80010e0 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5d 	bl	800108c <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff31 	bl	8001050 <__NVIC_EnableIRQ>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffa2 	bl	8001148 <SysTick_Config>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff feb6 	bl	8000f8c <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e099      	b.n	8001360 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2202      	movs	r2, #2
 8001230:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0201 	bic.w	r2, r2, #1
 800124a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800124c:	e00f      	b.n	800126e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800124e:	f7ff fe9d 	bl	8000f8c <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b05      	cmp	r3, #5
 800125a:	d908      	bls.n	800126e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2220      	movs	r2, #32
 8001260:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2203      	movs	r2, #3
 8001266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e078      	b.n	8001360 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1e8      	bne.n	800124e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	4b38      	ldr	r3, [pc, #224]	@ (8001368 <HAL_DMA_Init+0x158>)
 8001288:	4013      	ands	r3, r2
 800128a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800129a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4313      	orrs	r3, r2
 80012be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d107      	bne.n	80012d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	4313      	orrs	r3, r2
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f023 0307 	bic.w	r3, r3, #7
 80012ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d117      	bne.n	8001332 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4313      	orrs	r3, r2
 800130a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00e      	beq.n	8001332 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 fb01 	bl	800191c <DMA_CheckFifoParam>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2240      	movs	r2, #64	@ 0x40
 8001324:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800132e:	2301      	movs	r3, #1
 8001330:	e016      	b.n	8001360 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 fab8 	bl	80018b0 <DMA_CalcBaseAndBitshift>
 8001340:	4603      	mov	r3, r0
 8001342:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001348:	223f      	movs	r2, #63	@ 0x3f
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	f010803f 	.word	0xf010803f

0800136c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001382:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <HAL_DMA_Start_IT+0x26>
 800138e:	2302      	movs	r3, #2
 8001390:	e040      	b.n	8001414 <HAL_DMA_Start_IT+0xa8>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d12f      	bne.n	8001406 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2202      	movs	r2, #2
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 fa4a 	bl	8001854 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c4:	223f      	movs	r2, #63	@ 0x3f
 80013c6:	409a      	lsls	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0216 	orr.w	r2, r2, #22
 80013da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0208 	orr.w	r2, r2, #8
 80013f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0201 	orr.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e005      	b.n	8001412 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800140e:	2302      	movs	r3, #2
 8001410:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001412:	7dfb      	ldrb	r3, [r7, #23]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001428:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800142a:	f7ff fdaf 	bl	8000f8c <HAL_GetTick>
 800142e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d008      	beq.n	800144e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2280      	movs	r2, #128	@ 0x80
 8001440:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e052      	b.n	80014f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0216 	bic.w	r2, r2, #22
 800145c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800146c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	2b00      	cmp	r3, #0
 8001474:	d103      	bne.n	800147e <HAL_DMA_Abort+0x62>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0208 	bic.w	r2, r2, #8
 800148c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0201 	bic.w	r2, r2, #1
 800149c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800149e:	e013      	b.n	80014c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014a0:	f7ff fd74 	bl	8000f8c <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b05      	cmp	r3, #5
 80014ac:	d90c      	bls.n	80014c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2220      	movs	r2, #32
 80014b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2203      	movs	r2, #3
 80014b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e015      	b.n	80014f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1e4      	bne.n	80014a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014da:	223f      	movs	r2, #63	@ 0x3f
 80014dc:	409a      	lsls	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d004      	beq.n	800151a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2280      	movs	r2, #128	@ 0x80
 8001514:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00c      	b.n	8001534 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2205      	movs	r2, #5
 800151e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0201 	bic.w	r2, r2, #1
 8001530:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800154c:	4b8e      	ldr	r3, [pc, #568]	@ (8001788 <HAL_DMA_IRQHandler+0x248>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a8e      	ldr	r2, [pc, #568]	@ (800178c <HAL_DMA_IRQHandler+0x24c>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0a9b      	lsrs	r3, r3, #10
 8001558:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156a:	2208      	movs	r2, #8
 800156c:	409a      	lsls	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4013      	ands	r3, r2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d01a      	beq.n	80015ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0204 	bic.w	r2, r2, #4
 8001592:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001598:	2208      	movs	r2, #8
 800159a:	409a      	lsls	r2, r3
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b0:	2201      	movs	r2, #1
 80015b2:	409a      	lsls	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4013      	ands	r3, r2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d012      	beq.n	80015e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00b      	beq.n	80015e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ce:	2201      	movs	r2, #1
 80015d0:	409a      	lsls	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015da:	f043 0202 	orr.w	r2, r3, #2
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e6:	2204      	movs	r2, #4
 80015e8:	409a      	lsls	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d012      	beq.n	8001618 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00b      	beq.n	8001618 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001604:	2204      	movs	r2, #4
 8001606:	409a      	lsls	r2, r3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001610:	f043 0204 	orr.w	r2, r3, #4
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800161c:	2210      	movs	r2, #16
 800161e:	409a      	lsls	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d043      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d03c      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800163a:	2210      	movs	r2, #16
 800163c:	409a      	lsls	r2, r3
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d018      	beq.n	8001682 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d108      	bne.n	8001670 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	2b00      	cmp	r3, #0
 8001664:	d024      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	4798      	blx	r3
 800166e:	e01f      	b.n	80016b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01b      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	4798      	blx	r3
 8001680:	e016      	b.n	80016b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d107      	bne.n	80016a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0208 	bic.w	r2, r2, #8
 800169e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b4:	2220      	movs	r2, #32
 80016b6:	409a      	lsls	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 808f 	beq.w	80017e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8087 	beq.w	80017e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	2220      	movs	r2, #32
 80016d8:	409a      	lsls	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b05      	cmp	r3, #5
 80016e8:	d136      	bne.n	8001758 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0216 	bic.w	r2, r2, #22
 80016f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	695a      	ldr	r2, [r3, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001708:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	2b00      	cmp	r3, #0
 8001710:	d103      	bne.n	800171a <HAL_DMA_IRQHandler+0x1da>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001716:	2b00      	cmp	r3, #0
 8001718:	d007      	beq.n	800172a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0208 	bic.w	r2, r2, #8
 8001728:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172e:	223f      	movs	r2, #63	@ 0x3f
 8001730:	409a      	lsls	r2, r3
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800174a:	2b00      	cmp	r3, #0
 800174c:	d07e      	beq.n	800184c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	4798      	blx	r3
        }
        return;
 8001756:	e079      	b.n	800184c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d01d      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10d      	bne.n	8001790 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001778:	2b00      	cmp	r3, #0
 800177a:	d031      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	4798      	blx	r3
 8001784:	e02c      	b.n	80017e0 <HAL_DMA_IRQHandler+0x2a0>
 8001786:	bf00      	nop
 8001788:	20000028 	.word	0x20000028
 800178c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001794:	2b00      	cmp	r3, #0
 8001796:	d023      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	4798      	blx	r3
 80017a0:	e01e      	b.n	80017e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10f      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0210 	bic.w	r2, r2, #16
 80017be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d032      	beq.n	800184e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d022      	beq.n	800183a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2205      	movs	r2, #5
 80017f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0201 	bic.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	3301      	adds	r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	429a      	cmp	r2, r3
 8001816:	d307      	bcc.n	8001828 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f2      	bne.n	800180c <HAL_DMA_IRQHandler+0x2cc>
 8001826:	e000      	b.n	800182a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001828:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	4798      	blx	r3
 800184a:	e000      	b.n	800184e <HAL_DMA_IRQHandler+0x30e>
        return;
 800184c:	bf00      	nop
    }
  }
}
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001870:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b40      	cmp	r3, #64	@ 0x40
 8001880:	d108      	bne.n	8001894 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001892:	e007      	b.n	80018a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	60da      	str	r2, [r3, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	3b10      	subs	r3, #16
 80018c0:	4a14      	ldr	r2, [pc, #80]	@ (8001914 <DMA_CalcBaseAndBitshift+0x64>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018ca:	4a13      	ldr	r2, [pc, #76]	@ (8001918 <DMA_CalcBaseAndBitshift+0x68>)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d909      	bls.n	80018f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018e6:	f023 0303 	bic.w	r3, r3, #3
 80018ea:	1d1a      	adds	r2, r3, #4
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80018f0:	e007      	b.n	8001902 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018fa:	f023 0303 	bic.w	r3, r3, #3
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	aaaaaaab 	.word	0xaaaaaaab
 8001918:	08003924 	.word	0x08003924

0800191c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d11f      	bne.n	8001976 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d856      	bhi.n	80019ea <DMA_CheckFifoParam+0xce>
 800193c:	a201      	add	r2, pc, #4	@ (adr r2, 8001944 <DMA_CheckFifoParam+0x28>)
 800193e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001942:	bf00      	nop
 8001944:	08001955 	.word	0x08001955
 8001948:	08001967 	.word	0x08001967
 800194c:	08001955 	.word	0x08001955
 8001950:	080019eb 	.word	0x080019eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d046      	beq.n	80019ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001964:	e043      	b.n	80019ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800196e:	d140      	bne.n	80019f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001974:	e03d      	b.n	80019f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800197e:	d121      	bne.n	80019c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d837      	bhi.n	80019f6 <DMA_CheckFifoParam+0xda>
 8001986:	a201      	add	r2, pc, #4	@ (adr r2, 800198c <DMA_CheckFifoParam+0x70>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	0800199d 	.word	0x0800199d
 8001990:	080019a3 	.word	0x080019a3
 8001994:	0800199d 	.word	0x0800199d
 8001998:	080019b5 	.word	0x080019b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
      break;
 80019a0:	e030      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d025      	beq.n	80019fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b2:	e022      	b.n	80019fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019bc:	d11f      	bne.n	80019fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019c2:	e01c      	b.n	80019fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d903      	bls.n	80019d2 <DMA_CheckFifoParam+0xb6>
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d003      	beq.n	80019d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019d0:	e018      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
      break;
 80019d6:	e015      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00e      	beq.n	8001a02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
      break;
 80019e8:	e00b      	b.n	8001a02 <DMA_CheckFifoParam+0xe6>
      break;
 80019ea:	bf00      	nop
 80019ec:	e00a      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;
 80019ee:	bf00      	nop
 80019f0:	e008      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;
 80019f2:	bf00      	nop
 80019f4:	e006      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;
 80019f6:	bf00      	nop
 80019f8:	e004      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;
 80019fa:	bf00      	nop
 80019fc:	e002      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;   
 80019fe:	bf00      	nop
 8001a00:	e000      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;
 8001a02:	bf00      	nop
    }
  } 
  
  return status; 
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop

08001a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	@ 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e159      	b.n	8001ce4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a30:	2201      	movs	r2, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	f040 8148 	bne.w	8001cde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d005      	beq.n	8001a66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d130      	bne.n	8001ac8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	2203      	movs	r2, #3
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 0201 	and.w	r2, r3, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d017      	beq.n	8001b04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d123      	bne.n	8001b58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	08da      	lsrs	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3208      	adds	r2, #8
 8001b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	08da      	lsrs	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	69b9      	ldr	r1, [r7, #24]
 8001b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80a2 	beq.w	8001cde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b57      	ldr	r3, [pc, #348]	@ (8001cfc <HAL_GPIO_Init+0x2e8>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba2:	4a56      	ldr	r2, [pc, #344]	@ (8001cfc <HAL_GPIO_Init+0x2e8>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001baa:	4b54      	ldr	r3, [pc, #336]	@ (8001cfc <HAL_GPIO_Init+0x2e8>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb6:	4a52      	ldr	r2, [pc, #328]	@ (8001d00 <HAL_GPIO_Init+0x2ec>)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a49      	ldr	r2, [pc, #292]	@ (8001d04 <HAL_GPIO_Init+0x2f0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d019      	beq.n	8001c16 <HAL_GPIO_Init+0x202>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a48      	ldr	r2, [pc, #288]	@ (8001d08 <HAL_GPIO_Init+0x2f4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <HAL_GPIO_Init+0x1fe>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a47      	ldr	r2, [pc, #284]	@ (8001d0c <HAL_GPIO_Init+0x2f8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00d      	beq.n	8001c0e <HAL_GPIO_Init+0x1fa>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a46      	ldr	r2, [pc, #280]	@ (8001d10 <HAL_GPIO_Init+0x2fc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d007      	beq.n	8001c0a <HAL_GPIO_Init+0x1f6>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a45      	ldr	r2, [pc, #276]	@ (8001d14 <HAL_GPIO_Init+0x300>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d101      	bne.n	8001c06 <HAL_GPIO_Init+0x1f2>
 8001c02:	2304      	movs	r3, #4
 8001c04:	e008      	b.n	8001c18 <HAL_GPIO_Init+0x204>
 8001c06:	2307      	movs	r3, #7
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x204>
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e004      	b.n	8001c18 <HAL_GPIO_Init+0x204>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e002      	b.n	8001c18 <HAL_GPIO_Init+0x204>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_GPIO_Init+0x204>
 8001c16:	2300      	movs	r3, #0
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	f002 0203 	and.w	r2, r2, #3
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	4093      	lsls	r3, r2
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c28:	4935      	ldr	r1, [pc, #212]	@ (8001d00 <HAL_GPIO_Init+0x2ec>)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	089b      	lsrs	r3, r3, #2
 8001c2e:	3302      	adds	r3, #2
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c36:	4b38      	ldr	r3, [pc, #224]	@ (8001d18 <HAL_GPIO_Init+0x304>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c5a:	4a2f      	ldr	r2, [pc, #188]	@ (8001d18 <HAL_GPIO_Init+0x304>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c60:	4b2d      	ldr	r3, [pc, #180]	@ (8001d18 <HAL_GPIO_Init+0x304>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c84:	4a24      	ldr	r2, [pc, #144]	@ (8001d18 <HAL_GPIO_Init+0x304>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c8a:	4b23      	ldr	r3, [pc, #140]	@ (8001d18 <HAL_GPIO_Init+0x304>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cae:	4a1a      	ldr	r2, [pc, #104]	@ (8001d18 <HAL_GPIO_Init+0x304>)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <HAL_GPIO_Init+0x304>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd8:	4a0f      	ldr	r2, [pc, #60]	@ (8001d18 <HAL_GPIO_Init+0x304>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	2b0f      	cmp	r3, #15
 8001ce8:	f67f aea2 	bls.w	8001a30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3724      	adds	r7, #36	@ 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40013800 	.word	0x40013800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	40020800 	.word	0x40020800
 8001d10:	40020c00 	.word	0x40020c00
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40013c00 	.word	0x40013c00

08001d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d2c:	787b      	ldrb	r3, [r7, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d38:	e003      	b.n	8001d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d3a:	887b      	ldrh	r3, [r7, #2]
 8001d3c:	041a      	lsls	r2, r3, #16
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	619a      	str	r2, [r3, #24]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e267      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d075      	beq.n	8001e5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d6e:	4b88      	ldr	r3, [pc, #544]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d00c      	beq.n	8001d94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d7a:	4b85      	ldr	r3, [pc, #532]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d112      	bne.n	8001dac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d86:	4b82      	ldr	r3, [pc, #520]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d92:	d10b      	bne.n	8001dac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	4b7e      	ldr	r3, [pc, #504]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d05b      	beq.n	8001e58 <HAL_RCC_OscConfig+0x108>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d157      	bne.n	8001e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e242      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001db4:	d106      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x74>
 8001db6:	4b76      	ldr	r3, [pc, #472]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a75      	ldr	r2, [pc, #468]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e01d      	b.n	8001e00 <HAL_RCC_OscConfig+0xb0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x98>
 8001dce:	4b70      	ldr	r3, [pc, #448]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a6f      	ldr	r2, [pc, #444]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b6d      	ldr	r3, [pc, #436]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a6c      	ldr	r2, [pc, #432]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_OscConfig+0xb0>
 8001de8:	4b69      	ldr	r3, [pc, #420]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a68      	ldr	r2, [pc, #416]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b66      	ldr	r3, [pc, #408]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a65      	ldr	r2, [pc, #404]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff f8c0 	bl	8000f8c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff f8bc 	bl	8000f8c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	@ 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e207      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b5b      	ldr	r3, [pc, #364]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0xc0>
 8001e2e:	e014      	b.n	8001e5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff f8ac 	bl	8000f8c <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7ff f8a8 	bl	8000f8c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	@ 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e1f3      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4a:	4b51      	ldr	r3, [pc, #324]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0xe8>
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d063      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e66:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e72:	4b47      	ldr	r3, [pc, #284]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d11c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7e:	4b44      	ldr	r3, [pc, #272]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d116      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8a:	4b41      	ldr	r3, [pc, #260]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x152>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e1c7      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4937      	ldr	r1, [pc, #220]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb6:	e03a      	b.n	8001f2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d020      	beq.n	8001f02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec0:	4b34      	ldr	r3, [pc, #208]	@ (8001f94 <HAL_RCC_OscConfig+0x244>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7ff f861 	bl	8000f8c <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ece:	f7ff f85d 	bl	8000f8c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e1a8      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b28      	ldr	r3, [pc, #160]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4925      	ldr	r1, [pc, #148]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
 8001f00:	e015      	b.n	8001f2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f02:	4b24      	ldr	r3, [pc, #144]	@ (8001f94 <HAL_RCC_OscConfig+0x244>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff f840 	bl	8000f8c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f10:	f7ff f83c 	bl	8000f8c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e187      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f22:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d036      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d016      	beq.n	8001f70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f42:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <HAL_RCC_OscConfig+0x248>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f48:	f7ff f820 	bl	8000f8c <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f50:	f7ff f81c 	bl	8000f8c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e167      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x200>
 8001f6e:	e01b      	b.n	8001fa8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f70:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <HAL_RCC_OscConfig+0x248>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f76:	f7ff f809 	bl	8000f8c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7c:	e00e      	b.n	8001f9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7e:	f7ff f805 	bl	8000f8c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d907      	bls.n	8001f9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e150      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
 8001f90:	40023800 	.word	0x40023800
 8001f94:	42470000 	.word	0x42470000
 8001f98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9c:	4b88      	ldr	r3, [pc, #544]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 8001f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1ea      	bne.n	8001f7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8097 	beq.w	80020e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fba:	4b81      	ldr	r3, [pc, #516]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10f      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	4b7d      	ldr	r3, [pc, #500]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	4a7c      	ldr	r2, [pc, #496]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe6:	4b77      	ldr	r3, [pc, #476]	@ (80021c4 <HAL_RCC_OscConfig+0x474>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d118      	bne.n	8002024 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff2:	4b74      	ldr	r3, [pc, #464]	@ (80021c4 <HAL_RCC_OscConfig+0x474>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a73      	ldr	r2, [pc, #460]	@ (80021c4 <HAL_RCC_OscConfig+0x474>)
 8001ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffe:	f7fe ffc5 	bl	8000f8c <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002006:	f7fe ffc1 	bl	8000f8c <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e10c      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	4b6a      	ldr	r3, [pc, #424]	@ (80021c4 <HAL_RCC_OscConfig+0x474>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d106      	bne.n	800203a <HAL_RCC_OscConfig+0x2ea>
 800202c:	4b64      	ldr	r3, [pc, #400]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002030:	4a63      	ldr	r2, [pc, #396]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6713      	str	r3, [r2, #112]	@ 0x70
 8002038:	e01c      	b.n	8002074 <HAL_RCC_OscConfig+0x324>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b05      	cmp	r3, #5
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x30c>
 8002042:	4b5f      	ldr	r3, [pc, #380]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002046:	4a5e      	ldr	r2, [pc, #376]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	6713      	str	r3, [r2, #112]	@ 0x70
 800204e:	4b5c      	ldr	r3, [pc, #368]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002052:	4a5b      	ldr	r2, [pc, #364]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6713      	str	r3, [r2, #112]	@ 0x70
 800205a:	e00b      	b.n	8002074 <HAL_RCC_OscConfig+0x324>
 800205c:	4b58      	ldr	r3, [pc, #352]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002060:	4a57      	ldr	r2, [pc, #348]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	6713      	str	r3, [r2, #112]	@ 0x70
 8002068:	4b55      	ldr	r3, [pc, #340]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206c:	4a54      	ldr	r2, [pc, #336]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 800206e:	f023 0304 	bic.w	r3, r3, #4
 8002072:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d015      	beq.n	80020a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7fe ff86 	bl	8000f8c <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002082:	e00a      	b.n	800209a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002084:	f7fe ff82 	bl	8000f8c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0cb      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209a:	4b49      	ldr	r3, [pc, #292]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0ee      	beq.n	8002084 <HAL_RCC_OscConfig+0x334>
 80020a6:	e014      	b.n	80020d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7fe ff70 	bl	8000f8c <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b0:	f7fe ff6c 	bl	8000f8c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e0b5      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c6:	4b3e      	ldr	r3, [pc, #248]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 80020c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1ee      	bne.n	80020b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d8:	4b39      	ldr	r3, [pc, #228]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	4a38      	ldr	r2, [pc, #224]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 80020de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80a1 	beq.w	8002230 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ee:	4b34      	ldr	r3, [pc, #208]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d05c      	beq.n	80021b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d141      	bne.n	8002186 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002102:	4b31      	ldr	r3, [pc, #196]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7fe ff40 	bl	8000f8c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002110:	f7fe ff3c 	bl	8000f8c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e087      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002122:	4b27      	ldr	r3, [pc, #156]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213c:	019b      	lsls	r3, r3, #6
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002144:	085b      	lsrs	r3, r3, #1
 8002146:	3b01      	subs	r3, #1
 8002148:	041b      	lsls	r3, r3, #16
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002150:	061b      	lsls	r3, r3, #24
 8002152:	491b      	ldr	r1, [pc, #108]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002158:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7fe ff15 	bl	8000f8c <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002166:	f7fe ff11 	bl	8000f8c <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e05c      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002178:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x416>
 8002184:	e054      	b.n	8002230 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7fe fefe 	bl	8000f8c <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002194:	f7fe fefa 	bl	8000f8c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e045      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_RCC_OscConfig+0x470>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x444>
 80021b2:	e03d      	b.n	8002230 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e038      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40007000 	.word	0x40007000
 80021c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021cc:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <HAL_RCC_OscConfig+0x4ec>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d028      	beq.n	800222c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d121      	bne.n	800222c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d11a      	bne.n	800222c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021fc:	4013      	ands	r3, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002202:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002204:	4293      	cmp	r3, r2
 8002206:	d111      	bne.n	800222c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002212:	085b      	lsrs	r3, r3, #1
 8002214:	3b01      	subs	r3, #1
 8002216:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d107      	bne.n	800222c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002226:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800

08002240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0cc      	b.n	80023ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002254:	4b68      	ldr	r3, [pc, #416]	@ (80023f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d90c      	bls.n	800227c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b65      	ldr	r3, [pc, #404]	@ (80023f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b63      	ldr	r3, [pc, #396]	@ (80023f8 <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0b8      	b.n	80023ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d020      	beq.n	80022ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002294:	4b59      	ldr	r3, [pc, #356]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a58      	ldr	r2, [pc, #352]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800229e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ac:	4b53      	ldr	r3, [pc, #332]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4a52      	ldr	r2, [pc, #328]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b8:	4b50      	ldr	r3, [pc, #320]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	494d      	ldr	r1, [pc, #308]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d044      	beq.n	8002360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	4b47      	ldr	r3, [pc, #284]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d119      	bne.n	800231e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e07f      	b.n	80023ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d003      	beq.n	80022fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fe:	4b3f      	ldr	r3, [pc, #252]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e06f      	b.n	80023ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230e:	4b3b      	ldr	r3, [pc, #236]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e067      	b.n	80023ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231e:	4b37      	ldr	r3, [pc, #220]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f023 0203 	bic.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4934      	ldr	r1, [pc, #208]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	4313      	orrs	r3, r2
 800232e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002330:	f7fe fe2c 	bl	8000f8c <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	e00a      	b.n	800234e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002338:	f7fe fe28 	bl	8000f8c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e04f      	b.n	80023ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	4b2b      	ldr	r3, [pc, #172]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 020c 	and.w	r2, r3, #12
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	429a      	cmp	r2, r3
 800235e:	d1eb      	bne.n	8002338 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002360:	4b25      	ldr	r3, [pc, #148]	@ (80023f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d20c      	bcs.n	8002388 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b22      	ldr	r3, [pc, #136]	@ (80023f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b20      	ldr	r3, [pc, #128]	@ (80023f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e032      	b.n	80023ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4916      	ldr	r1, [pc, #88]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023b2:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	490e      	ldr	r1, [pc, #56]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023c6:	f000 f821 	bl	800240c <HAL_RCC_GetSysClockFreq>
 80023ca:	4602      	mov	r2, r0
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	490a      	ldr	r1, [pc, #40]	@ (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	5ccb      	ldrb	r3, [r1, r3]
 80023da:	fa22 f303 	lsr.w	r3, r2, r3
 80023de:	4a09      	ldr	r2, [pc, #36]	@ (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023e2:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <HAL_RCC_ClockConfig+0x1c8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fd8c 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40023c00 	.word	0x40023c00
 80023fc:	40023800 	.word	0x40023800
 8002400:	0800390c 	.word	0x0800390c
 8002404:	20000028 	.word	0x20000028
 8002408:	2000002c 	.word	0x2000002c

0800240c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800240c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002410:	b094      	sub	sp, #80	@ 0x50
 8002412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002424:	4b79      	ldr	r3, [pc, #484]	@ (800260c <HAL_RCC_GetSysClockFreq+0x200>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b08      	cmp	r3, #8
 800242e:	d00d      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x40>
 8002430:	2b08      	cmp	r3, #8
 8002432:	f200 80e1 	bhi.w	80025f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x34>
 800243a:	2b04      	cmp	r3, #4
 800243c:	d003      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0x3a>
 800243e:	e0db      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002440:	4b73      	ldr	r3, [pc, #460]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x204>)
 8002442:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002444:	e0db      	b.n	80025fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002446:	4b73      	ldr	r3, [pc, #460]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x208>)
 8002448:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800244a:	e0d8      	b.n	80025fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800244c:	4b6f      	ldr	r3, [pc, #444]	@ (800260c <HAL_RCC_GetSysClockFreq+0x200>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002454:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002456:	4b6d      	ldr	r3, [pc, #436]	@ (800260c <HAL_RCC_GetSysClockFreq+0x200>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d063      	beq.n	800252a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002462:	4b6a      	ldr	r3, [pc, #424]	@ (800260c <HAL_RCC_GetSysClockFreq+0x200>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	099b      	lsrs	r3, r3, #6
 8002468:	2200      	movs	r2, #0
 800246a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800246c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800246e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002474:	633b      	str	r3, [r7, #48]	@ 0x30
 8002476:	2300      	movs	r3, #0
 8002478:	637b      	str	r3, [r7, #52]	@ 0x34
 800247a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800247e:	4622      	mov	r2, r4
 8002480:	462b      	mov	r3, r5
 8002482:	f04f 0000 	mov.w	r0, #0
 8002486:	f04f 0100 	mov.w	r1, #0
 800248a:	0159      	lsls	r1, r3, #5
 800248c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002490:	0150      	lsls	r0, r2, #5
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4621      	mov	r1, r4
 8002498:	1a51      	subs	r1, r2, r1
 800249a:	6139      	str	r1, [r7, #16]
 800249c:	4629      	mov	r1, r5
 800249e:	eb63 0301 	sbc.w	r3, r3, r1
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024b0:	4659      	mov	r1, fp
 80024b2:	018b      	lsls	r3, r1, #6
 80024b4:	4651      	mov	r1, sl
 80024b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ba:	4651      	mov	r1, sl
 80024bc:	018a      	lsls	r2, r1, #6
 80024be:	4651      	mov	r1, sl
 80024c0:	ebb2 0801 	subs.w	r8, r2, r1
 80024c4:	4659      	mov	r1, fp
 80024c6:	eb63 0901 	sbc.w	r9, r3, r1
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024de:	4690      	mov	r8, r2
 80024e0:	4699      	mov	r9, r3
 80024e2:	4623      	mov	r3, r4
 80024e4:	eb18 0303 	adds.w	r3, r8, r3
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	462b      	mov	r3, r5
 80024ec:	eb49 0303 	adc.w	r3, r9, r3
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024fe:	4629      	mov	r1, r5
 8002500:	024b      	lsls	r3, r1, #9
 8002502:	4621      	mov	r1, r4
 8002504:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002508:	4621      	mov	r1, r4
 800250a:	024a      	lsls	r2, r1, #9
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002512:	2200      	movs	r2, #0
 8002514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002516:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002518:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800251c:	f7fd fe62 	bl	80001e4 <__aeabi_uldivmod>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4613      	mov	r3, r2
 8002526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002528:	e058      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252a:	4b38      	ldr	r3, [pc, #224]	@ (800260c <HAL_RCC_GetSysClockFreq+0x200>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	099b      	lsrs	r3, r3, #6
 8002530:	2200      	movs	r2, #0
 8002532:	4618      	mov	r0, r3
 8002534:	4611      	mov	r1, r2
 8002536:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800253a:	623b      	str	r3, [r7, #32]
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002540:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002544:	4642      	mov	r2, r8
 8002546:	464b      	mov	r3, r9
 8002548:	f04f 0000 	mov.w	r0, #0
 800254c:	f04f 0100 	mov.w	r1, #0
 8002550:	0159      	lsls	r1, r3, #5
 8002552:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002556:	0150      	lsls	r0, r2, #5
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4641      	mov	r1, r8
 800255e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002562:	4649      	mov	r1, r9
 8002564:	eb63 0b01 	sbc.w	fp, r3, r1
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002574:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002578:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800257c:	ebb2 040a 	subs.w	r4, r2, sl
 8002580:	eb63 050b 	sbc.w	r5, r3, fp
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	00eb      	lsls	r3, r5, #3
 800258e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002592:	00e2      	lsls	r2, r4, #3
 8002594:	4614      	mov	r4, r2
 8002596:	461d      	mov	r5, r3
 8002598:	4643      	mov	r3, r8
 800259a:	18e3      	adds	r3, r4, r3
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	464b      	mov	r3, r9
 80025a0:	eb45 0303 	adc.w	r3, r5, r3
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025b2:	4629      	mov	r1, r5
 80025b4:	028b      	lsls	r3, r1, #10
 80025b6:	4621      	mov	r1, r4
 80025b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025bc:	4621      	mov	r1, r4
 80025be:	028a      	lsls	r2, r1, #10
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025c6:	2200      	movs	r2, #0
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	61fa      	str	r2, [r7, #28]
 80025cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d0:	f7fd fe08 	bl	80001e4 <__aeabi_uldivmod>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4613      	mov	r3, r2
 80025da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025dc:	4b0b      	ldr	r3, [pc, #44]	@ (800260c <HAL_RCC_GetSysClockFreq+0x200>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	0c1b      	lsrs	r3, r3, #16
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	3301      	adds	r3, #1
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80025ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025f6:	e002      	b.n	80025fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025f8:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x204>)
 80025fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002600:	4618      	mov	r0, r3
 8002602:	3750      	adds	r7, #80	@ 0x50
 8002604:	46bd      	mov	sp, r7
 8002606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800
 8002610:	00f42400 	.word	0x00f42400
 8002614:	007a1200 	.word	0x007a1200

08002618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800261c:	4b03      	ldr	r3, [pc, #12]	@ (800262c <HAL_RCC_GetHCLKFreq+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000028 	.word	0x20000028

08002630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002634:	f7ff fff0 	bl	8002618 <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	0a9b      	lsrs	r3, r3, #10
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4903      	ldr	r1, [pc, #12]	@ (8002654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800
 8002654:	0800391c 	.word	0x0800391c

08002658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800265c:	f7ff ffdc 	bl	8002618 <HAL_RCC_GetHCLKFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	0b5b      	lsrs	r3, r3, #13
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	4903      	ldr	r1, [pc, #12]	@ (800267c <HAL_RCC_GetPCLK2Freq+0x24>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40023800 	.word	0x40023800
 800267c:	0800391c 	.word	0x0800391c

08002680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e042      	b.n	8002718 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe fb08 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2224      	movs	r2, #36	@ 0x24
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 fe6b 	bl	80033a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b20      	cmp	r3, #32
 8002738:	d112      	bne.n	8002760 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HAL_UART_Receive_DMA+0x26>
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e00b      	b.n	8002762 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	461a      	mov	r2, r3
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fbc2 	bl	8002ee0 <UART_Start_Receive_DMA>
 800275c:	4603      	mov	r3, r0
 800275e:	e000      	b.n	8002762 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002760:	2302      	movs	r3, #2
  }
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b0ba      	sub	sp, #232	@ 0xe8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800279e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80027aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <HAL_UART_IRQHandler+0x66>
 80027be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fd29 	bl	8003222 <UART_Receive_IT>
      return;
 80027d0:	e25b      	b.n	8002c8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80de 	beq.w	8002998 <HAL_UART_IRQHandler+0x22c>
 80027dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d106      	bne.n	80027f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80d1 	beq.w	8002998 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <HAL_UART_IRQHandler+0xae>
 8002802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800281a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_UART_IRQHandler+0xd2>
 8002826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	f043 0202 	orr.w	r2, r3, #2
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800283e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_UART_IRQHandler+0xf6>
 800284a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	f043 0204 	orr.w	r2, r3, #4
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d011      	beq.n	8002892 <HAL_UART_IRQHandler+0x126>
 800286e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d105      	bne.n	8002886 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800287a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	f043 0208 	orr.w	r2, r3, #8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 81f2 	beq.w	8002c80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800289c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_UART_IRQHandler+0x14e>
 80028a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fcb4 	bl	8003222 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c4:	2b40      	cmp	r3, #64	@ 0x40
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d103      	bne.n	80028e6 <HAL_UART_IRQHandler+0x17a>
 80028de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d04f      	beq.n	8002986 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fbbc 	bl	8003064 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f6:	2b40      	cmp	r3, #64	@ 0x40
 80028f8:	d141      	bne.n	800297e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3314      	adds	r3, #20
 8002900:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002904:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002908:	e853 3f00 	ldrex	r3, [r3]
 800290c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002910:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3314      	adds	r3, #20
 8002922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002926:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800292a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800293e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1d9      	bne.n	80028fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294a:	2b00      	cmp	r3, #0
 800294c:	d013      	beq.n	8002976 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002952:	4a7e      	ldr	r2, [pc, #504]	@ (8002b4c <HAL_UART_IRQHandler+0x3e0>)
 8002954:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe fdce 	bl	80014fc <HAL_DMA_Abort_IT>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d016      	beq.n	8002994 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002970:	4610      	mov	r0, r2
 8002972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002974:	e00e      	b.n	8002994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f99e 	bl	8002cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297c:	e00a      	b.n	8002994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f99a 	bl	8002cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002984:	e006      	b.n	8002994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f996 	bl	8002cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002992:	e175      	b.n	8002c80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002994:	bf00      	nop
    return;
 8002996:	e173      	b.n	8002c80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299c:	2b01      	cmp	r3, #1
 800299e:	f040 814f 	bne.w	8002c40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8148 	beq.w	8002c40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8141 	beq.w	8002c40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029de:	2b40      	cmp	r3, #64	@ 0x40
 80029e0:	f040 80b6 	bne.w	8002b50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8145 	beq.w	8002c84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80029fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a02:	429a      	cmp	r2, r3
 8002a04:	f080 813e 	bcs.w	8002c84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a1a:	f000 8088 	beq.w	8002b2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	330c      	adds	r3, #12
 8002a24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a2c:	e853 3f00 	ldrex	r3, [r3]
 8002a30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a5a:	e841 2300 	strex	r3, r2, [r1]
 8002a5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1d9      	bne.n	8002a1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3314      	adds	r3, #20
 8002a70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a74:	e853 3f00 	ldrex	r3, [r3]
 8002a78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3314      	adds	r3, #20
 8002a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a9a:	e841 2300 	strex	r3, r2, [r1]
 8002a9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002aa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1e1      	bne.n	8002a6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3314      	adds	r3, #20
 8002aac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ab0:	e853 3f00 	ldrex	r3, [r3]
 8002ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002ab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ab8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002abc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3314      	adds	r3, #20
 8002ac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002aca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002acc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ace:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ad0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ad2:	e841 2300 	strex	r3, r2, [r1]
 8002ad6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ad8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1e3      	bne.n	8002aa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	330c      	adds	r3, #12
 8002af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002af6:	e853 3f00 	ldrex	r3, [r3]
 8002afa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002afc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002afe:	f023 0310 	bic.w	r3, r3, #16
 8002b02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	330c      	adds	r3, #12
 8002b0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b18:	e841 2300 	strex	r3, r2, [r1]
 8002b1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e3      	bne.n	8002aec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe fc77 	bl	800141c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	4619      	mov	r1, r3
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f8c1 	bl	8002ccc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b4a:	e09b      	b.n	8002c84 <HAL_UART_IRQHandler+0x518>
 8002b4c:	0800312b 	.word	0x0800312b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 808e 	beq.w	8002c88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8089 	beq.w	8002c88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	330c      	adds	r3, #12
 8002b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b80:	e853 3f00 	ldrex	r3, [r3]
 8002b84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	330c      	adds	r3, #12
 8002b96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002b9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002b9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ba2:	e841 2300 	strex	r3, r2, [r1]
 8002ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1e3      	bne.n	8002b76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3314      	adds	r3, #20
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	e853 3f00 	ldrex	r3, [r3]
 8002bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3314      	adds	r3, #20
 8002bce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002bd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8002bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bda:	e841 2300 	strex	r3, r2, [r1]
 8002bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1e3      	bne.n	8002bae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	330c      	adds	r3, #12
 8002bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	e853 3f00 	ldrex	r3, [r3]
 8002c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 0310 	bic.w	r3, r3, #16
 8002c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002c18:	61fa      	str	r2, [r7, #28]
 8002c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1c:	69b9      	ldr	r1, [r7, #24]
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	e841 2300 	strex	r3, r2, [r1]
 8002c24:	617b      	str	r3, [r7, #20]
   return(result);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e3      	bne.n	8002bf4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c36:	4619      	mov	r1, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f847 	bl	8002ccc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c3e:	e023      	b.n	8002c88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d009      	beq.n	8002c60 <HAL_UART_IRQHandler+0x4f4>
 8002c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fa7a 	bl	8003152 <UART_Transmit_IT>
    return;
 8002c5e:	e014      	b.n	8002c8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00e      	beq.n	8002c8a <HAL_UART_IRQHandler+0x51e>
 8002c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 faba 	bl	80031f2 <UART_EndTransmit_IT>
    return;
 8002c7e:	e004      	b.n	8002c8a <HAL_UART_IRQHandler+0x51e>
    return;
 8002c80:	bf00      	nop
 8002c82:	e002      	b.n	8002c8a <HAL_UART_IRQHandler+0x51e>
      return;
 8002c84:	bf00      	nop
 8002c86:	e000      	b.n	8002c8a <HAL_UART_IRQHandler+0x51e>
      return;
 8002c88:	bf00      	nop
  }
}
 8002c8a:	37e8      	adds	r7, #232	@ 0xe8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b09c      	sub	sp, #112	@ 0x70
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d172      	bne.n	8002de6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d02:	2200      	movs	r2, #0
 8002d04:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d10:	e853 3f00 	ldrex	r3, [r3]
 8002d14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002d26:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d28:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d2e:	e841 2300 	strex	r3, r2, [r1]
 8002d32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e5      	bne.n	8002d06 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3314      	adds	r3, #20
 8002d40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3314      	adds	r3, #20
 8002d58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002d5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e5      	bne.n	8002d3a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3314      	adds	r3, #20
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	e853 3f00 	ldrex	r3, [r3]
 8002d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d84:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3314      	adds	r3, #20
 8002d8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d96:	e841 2300 	strex	r3, r2, [r1]
 8002d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1e5      	bne.n	8002d6e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002da2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002daa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d119      	bne.n	8002de6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	330c      	adds	r3, #12
 8002db8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	e853 3f00 	ldrex	r3, [r3]
 8002dc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f023 0310 	bic.w	r3, r3, #16
 8002dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	330c      	adds	r3, #12
 8002dd0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002dd2:	61fa      	str	r2, [r7, #28]
 8002dd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd6:	69b9      	ldr	r1, [r7, #24]
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	e841 2300 	strex	r3, r2, [r1]
 8002dde:	617b      	str	r3, [r7, #20]
   return(result);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1e5      	bne.n	8002db2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002de8:	2200      	movs	r2, #0
 8002dea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d106      	bne.n	8002e02 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002df4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002df6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002dfc:	f7ff ff66 	bl	8002ccc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e00:	e002      	b.n	8002e08 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002e02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002e04:	f7fd fd9c 	bl	8000940 <HAL_UART_RxCpltCallback>
}
 8002e08:	bf00      	nop
 8002e0a:	3770      	adds	r7, #112	@ 0x70
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d108      	bne.n	8002e3e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	4619      	mov	r1, r3
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff ff48 	bl	8002ccc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e3c:	e002      	b.n	8002e44 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f7ff ff30 	bl	8002ca4 <HAL_UART_RxHalfCpltCallback>
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e68:	2b80      	cmp	r3, #128	@ 0x80
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b21      	cmp	r3, #33	@ 0x21
 8002e7e:	d108      	bne.n	8002e92 <UART_DMAError+0x46>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002e8c:	68b8      	ldr	r0, [r7, #8]
 8002e8e:	f000 f8c1 	bl	8003014 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9c:	2b40      	cmp	r3, #64	@ 0x40
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b22      	cmp	r3, #34	@ 0x22
 8002eb2:	d108      	bne.n	8002ec6 <UART_DMAError+0x7a>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002ec0:	68b8      	ldr	r0, [r7, #8]
 8002ec2:	f000 f8cf 	bl	8003064 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f043 0210 	orr.w	r2, r3, #16
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ed2:	68b8      	ldr	r0, [r7, #8]
 8002ed4:	f7ff fef0 	bl	8002cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b098      	sub	sp, #96	@ 0x60
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	4613      	mov	r3, r2
 8002eec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	88fa      	ldrh	r2, [r7, #6]
 8002ef8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2222      	movs	r2, #34	@ 0x22
 8002f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0c:	4a3e      	ldr	r2, [pc, #248]	@ (8003008 <UART_Start_Receive_DMA+0x128>)
 8002f0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f14:	4a3d      	ldr	r2, [pc, #244]	@ (800300c <UART_Start_Receive_DMA+0x12c>)
 8002f16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1c:	4a3c      	ldr	r2, [pc, #240]	@ (8003010 <UART_Start_Receive_DMA+0x130>)
 8002f1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f24:	2200      	movs	r2, #0
 8002f26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002f28:	f107 0308 	add.w	r3, r7, #8
 8002f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3304      	adds	r3, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	f7fe fa14 	bl	800136c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d019      	beq.n	8002f96 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	330c      	adds	r3, #12
 8002f68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
 8002f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f82:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f86:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002f88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f8a:	e841 2300 	strex	r3, r2, [r1]
 8002f8e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1e5      	bne.n	8002f62 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3314      	adds	r3, #20
 8002f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa0:	e853 3f00 	ldrex	r3, [r3]
 8002fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3314      	adds	r3, #20
 8002fb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002fb6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002fb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002fbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e5      	bne.n	8002f96 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3314      	adds	r3, #20
 8002fd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fe0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3314      	adds	r3, #20
 8002fe8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002fea:	627a      	str	r2, [r7, #36]	@ 0x24
 8002fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	6a39      	ldr	r1, [r7, #32]
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e5      	bne.n	8002fca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3760      	adds	r7, #96	@ 0x60
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	08002ce5 	.word	0x08002ce5
 800300c:	08002e11 	.word	0x08002e11
 8003010:	08002e4d 	.word	0x08002e4d

08003014 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	@ 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	e853 3f00 	ldrex	r3, [r3]
 800302a:	60bb      	str	r3, [r7, #8]
   return(result);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	61ba      	str	r2, [r7, #24]
 800303e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003040:	6979      	ldr	r1, [r7, #20]
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	e841 2300 	strex	r3, r2, [r1]
 8003048:	613b      	str	r3, [r7, #16]
   return(result);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e5      	bne.n	800301c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003058:	bf00      	nop
 800305a:	3724      	adds	r7, #36	@ 0x24
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003064:	b480      	push	{r7}
 8003066:	b095      	sub	sp, #84	@ 0x54
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	330c      	adds	r3, #12
 8003072:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003076:	e853 3f00 	ldrex	r3, [r3]
 800307a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800307c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	330c      	adds	r3, #12
 800308a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800308c:	643a      	str	r2, [r7, #64]	@ 0x40
 800308e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003090:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003092:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003094:	e841 2300 	strex	r3, r2, [r1]
 8003098:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800309a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e5      	bne.n	800306c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3314      	adds	r3, #20
 80030a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	e853 3f00 	ldrex	r3, [r3]
 80030ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3314      	adds	r3, #20
 80030be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030c8:	e841 2300 	strex	r3, r2, [r1]
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e5      	bne.n	80030a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d119      	bne.n	8003110 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	e853 3f00 	ldrex	r3, [r3]
 80030ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f023 0310 	bic.w	r3, r3, #16
 80030f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030fc:	61ba      	str	r2, [r7, #24]
 80030fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003100:	6979      	ldr	r1, [r7, #20]
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	e841 2300 	strex	r3, r2, [r1]
 8003108:	613b      	str	r3, [r7, #16]
   return(result);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1e5      	bne.n	80030dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800311e:	bf00      	nop
 8003120:	3754      	adds	r7, #84	@ 0x54
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003136:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f7ff fdb7 	bl	8002cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003152:	b480      	push	{r7}
 8003154:	b085      	sub	sp, #20
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b21      	cmp	r3, #33	@ 0x21
 8003164:	d13e      	bne.n	80031e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800316e:	d114      	bne.n	800319a <UART_Transmit_IT+0x48>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d110      	bne.n	800319a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800318c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	1c9a      	adds	r2, r3, #2
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	621a      	str	r2, [r3, #32]
 8003198:	e008      	b.n	80031ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	1c59      	adds	r1, r3, #1
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6211      	str	r1, [r2, #32]
 80031a4:	781a      	ldrb	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	4619      	mov	r1, r3
 80031ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10f      	bne.n	80031e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e000      	b.n	80031e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031e4:	2302      	movs	r3, #2
  }
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003208:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff fd3c 	bl	8002c90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b08c      	sub	sp, #48	@ 0x30
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b22      	cmp	r3, #34	@ 0x22
 8003234:	f040 80ae 	bne.w	8003394 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003240:	d117      	bne.n	8003272 <UART_Receive_IT+0x50>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d113      	bne.n	8003272 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800324a:	2300      	movs	r3, #0
 800324c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003252:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	b29b      	uxth	r3, r3
 800325c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003260:	b29a      	uxth	r2, r3
 8003262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003264:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326a:	1c9a      	adds	r2, r3, #2
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003270:	e026      	b.n	80032c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003276:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003278:	2300      	movs	r3, #0
 800327a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003284:	d007      	beq.n	8003296 <UART_Receive_IT+0x74>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <UART_Receive_IT+0x82>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e008      	b.n	80032b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4619      	mov	r1, r3
 80032ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d15d      	bne.n	8003390 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0220 	bic.w	r2, r2, #32
 80032e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	2b01      	cmp	r3, #1
 8003318:	d135      	bne.n	8003386 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	330c      	adds	r3, #12
 8003326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	e853 3f00 	ldrex	r3, [r3]
 800332e:	613b      	str	r3, [r7, #16]
   return(result);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f023 0310 	bic.w	r3, r3, #16
 8003336:	627b      	str	r3, [r7, #36]	@ 0x24
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	330c      	adds	r3, #12
 800333e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003340:	623a      	str	r2, [r7, #32]
 8003342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003344:	69f9      	ldr	r1, [r7, #28]
 8003346:	6a3a      	ldr	r2, [r7, #32]
 8003348:	e841 2300 	strex	r3, r2, [r1]
 800334c:	61bb      	str	r3, [r7, #24]
   return(result);
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e5      	bne.n	8003320 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	2b10      	cmp	r3, #16
 8003360:	d10a      	bne.n	8003378 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800337c:	4619      	mov	r1, r3
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff fca4 	bl	8002ccc <HAL_UARTEx_RxEventCallback>
 8003384:	e002      	b.n	800338c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fd fada 	bl	8000940 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e002      	b.n	8003396 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	e000      	b.n	8003396 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003394:	2302      	movs	r3, #2
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	3730      	adds	r7, #48	@ 0x30
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a4:	b0c0      	sub	sp, #256	@ 0x100
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033bc:	68d9      	ldr	r1, [r3, #12]
 80033be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	ea40 0301 	orr.w	r3, r0, r1
 80033c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	431a      	orrs	r2, r3
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80033f8:	f021 010c 	bic.w	r1, r1, #12
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003406:	430b      	orrs	r3, r1
 8003408:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800340a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341a:	6999      	ldr	r1, [r3, #24]
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	ea40 0301 	orr.w	r3, r0, r1
 8003426:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b8f      	ldr	r3, [pc, #572]	@ (800366c <UART_SetConfig+0x2cc>)
 8003430:	429a      	cmp	r2, r3
 8003432:	d005      	beq.n	8003440 <UART_SetConfig+0xa0>
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b8d      	ldr	r3, [pc, #564]	@ (8003670 <UART_SetConfig+0x2d0>)
 800343c:	429a      	cmp	r2, r3
 800343e:	d104      	bne.n	800344a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003440:	f7ff f90a 	bl	8002658 <HAL_RCC_GetPCLK2Freq>
 8003444:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003448:	e003      	b.n	8003452 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800344a:	f7ff f8f1 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 800344e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800345c:	f040 810c 	bne.w	8003678 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003464:	2200      	movs	r2, #0
 8003466:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800346a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800346e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003472:	4622      	mov	r2, r4
 8003474:	462b      	mov	r3, r5
 8003476:	1891      	adds	r1, r2, r2
 8003478:	65b9      	str	r1, [r7, #88]	@ 0x58
 800347a:	415b      	adcs	r3, r3
 800347c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800347e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003482:	4621      	mov	r1, r4
 8003484:	eb12 0801 	adds.w	r8, r2, r1
 8003488:	4629      	mov	r1, r5
 800348a:	eb43 0901 	adc.w	r9, r3, r1
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800349a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800349e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034a2:	4690      	mov	r8, r2
 80034a4:	4699      	mov	r9, r3
 80034a6:	4623      	mov	r3, r4
 80034a8:	eb18 0303 	adds.w	r3, r8, r3
 80034ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034b0:	462b      	mov	r3, r5
 80034b2:	eb49 0303 	adc.w	r3, r9, r3
 80034b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80034ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034ce:	460b      	mov	r3, r1
 80034d0:	18db      	adds	r3, r3, r3
 80034d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80034d4:	4613      	mov	r3, r2
 80034d6:	eb42 0303 	adc.w	r3, r2, r3
 80034da:	657b      	str	r3, [r7, #84]	@ 0x54
 80034dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80034e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80034e4:	f7fc fe7e 	bl	80001e4 <__aeabi_uldivmod>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4b61      	ldr	r3, [pc, #388]	@ (8003674 <UART_SetConfig+0x2d4>)
 80034ee:	fba3 2302 	umull	r2, r3, r3, r2
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	011c      	lsls	r4, r3, #4
 80034f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034fa:	2200      	movs	r2, #0
 80034fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003500:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003504:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003508:	4642      	mov	r2, r8
 800350a:	464b      	mov	r3, r9
 800350c:	1891      	adds	r1, r2, r2
 800350e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003510:	415b      	adcs	r3, r3
 8003512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003514:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003518:	4641      	mov	r1, r8
 800351a:	eb12 0a01 	adds.w	sl, r2, r1
 800351e:	4649      	mov	r1, r9
 8003520:	eb43 0b01 	adc.w	fp, r3, r1
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003530:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003538:	4692      	mov	sl, r2
 800353a:	469b      	mov	fp, r3
 800353c:	4643      	mov	r3, r8
 800353e:	eb1a 0303 	adds.w	r3, sl, r3
 8003542:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003546:	464b      	mov	r3, r9
 8003548:	eb4b 0303 	adc.w	r3, fp, r3
 800354c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800355c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003560:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003564:	460b      	mov	r3, r1
 8003566:	18db      	adds	r3, r3, r3
 8003568:	643b      	str	r3, [r7, #64]	@ 0x40
 800356a:	4613      	mov	r3, r2
 800356c:	eb42 0303 	adc.w	r3, r2, r3
 8003570:	647b      	str	r3, [r7, #68]	@ 0x44
 8003572:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003576:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800357a:	f7fc fe33 	bl	80001e4 <__aeabi_uldivmod>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4611      	mov	r1, r2
 8003584:	4b3b      	ldr	r3, [pc, #236]	@ (8003674 <UART_SetConfig+0x2d4>)
 8003586:	fba3 2301 	umull	r2, r3, r3, r1
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2264      	movs	r2, #100	@ 0x64
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	1acb      	subs	r3, r1, r3
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800359a:	4b36      	ldr	r3, [pc, #216]	@ (8003674 <UART_SetConfig+0x2d4>)
 800359c:	fba3 2302 	umull	r2, r3, r3, r2
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035a8:	441c      	add	r4, r3
 80035aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ae:	2200      	movs	r2, #0
 80035b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80035b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80035bc:	4642      	mov	r2, r8
 80035be:	464b      	mov	r3, r9
 80035c0:	1891      	adds	r1, r2, r2
 80035c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035c4:	415b      	adcs	r3, r3
 80035c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80035cc:	4641      	mov	r1, r8
 80035ce:	1851      	adds	r1, r2, r1
 80035d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80035d2:	4649      	mov	r1, r9
 80035d4:	414b      	adcs	r3, r1
 80035d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80035e4:	4659      	mov	r1, fp
 80035e6:	00cb      	lsls	r3, r1, #3
 80035e8:	4651      	mov	r1, sl
 80035ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ee:	4651      	mov	r1, sl
 80035f0:	00ca      	lsls	r2, r1, #3
 80035f2:	4610      	mov	r0, r2
 80035f4:	4619      	mov	r1, r3
 80035f6:	4603      	mov	r3, r0
 80035f8:	4642      	mov	r2, r8
 80035fa:	189b      	adds	r3, r3, r2
 80035fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003600:	464b      	mov	r3, r9
 8003602:	460a      	mov	r2, r1
 8003604:	eb42 0303 	adc.w	r3, r2, r3
 8003608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800360c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003618:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800361c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003620:	460b      	mov	r3, r1
 8003622:	18db      	adds	r3, r3, r3
 8003624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003626:	4613      	mov	r3, r2
 8003628:	eb42 0303 	adc.w	r3, r2, r3
 800362c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800362e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003632:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003636:	f7fc fdd5 	bl	80001e4 <__aeabi_uldivmod>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <UART_SetConfig+0x2d4>)
 8003640:	fba3 1302 	umull	r1, r3, r3, r2
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	2164      	movs	r1, #100	@ 0x64
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	3332      	adds	r3, #50	@ 0x32
 8003652:	4a08      	ldr	r2, [pc, #32]	@ (8003674 <UART_SetConfig+0x2d4>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	f003 0207 	and.w	r2, r3, #7
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4422      	add	r2, r4
 8003666:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003668:	e106      	b.n	8003878 <UART_SetConfig+0x4d8>
 800366a:	bf00      	nop
 800366c:	40011000 	.word	0x40011000
 8003670:	40011400 	.word	0x40011400
 8003674:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800367c:	2200      	movs	r2, #0
 800367e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003682:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003686:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800368a:	4642      	mov	r2, r8
 800368c:	464b      	mov	r3, r9
 800368e:	1891      	adds	r1, r2, r2
 8003690:	6239      	str	r1, [r7, #32]
 8003692:	415b      	adcs	r3, r3
 8003694:	627b      	str	r3, [r7, #36]	@ 0x24
 8003696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800369a:	4641      	mov	r1, r8
 800369c:	1854      	adds	r4, r2, r1
 800369e:	4649      	mov	r1, r9
 80036a0:	eb43 0501 	adc.w	r5, r3, r1
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	00eb      	lsls	r3, r5, #3
 80036ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036b2:	00e2      	lsls	r2, r4, #3
 80036b4:	4614      	mov	r4, r2
 80036b6:	461d      	mov	r5, r3
 80036b8:	4643      	mov	r3, r8
 80036ba:	18e3      	adds	r3, r4, r3
 80036bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036c0:	464b      	mov	r3, r9
 80036c2:	eb45 0303 	adc.w	r3, r5, r3
 80036c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80036e6:	4629      	mov	r1, r5
 80036e8:	008b      	lsls	r3, r1, #2
 80036ea:	4621      	mov	r1, r4
 80036ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036f0:	4621      	mov	r1, r4
 80036f2:	008a      	lsls	r2, r1, #2
 80036f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80036f8:	f7fc fd74 	bl	80001e4 <__aeabi_uldivmod>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4b60      	ldr	r3, [pc, #384]	@ (8003884 <UART_SetConfig+0x4e4>)
 8003702:	fba3 2302 	umull	r2, r3, r3, r2
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	011c      	lsls	r4, r3, #4
 800370a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800370e:	2200      	movs	r2, #0
 8003710:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003714:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003718:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800371c:	4642      	mov	r2, r8
 800371e:	464b      	mov	r3, r9
 8003720:	1891      	adds	r1, r2, r2
 8003722:	61b9      	str	r1, [r7, #24]
 8003724:	415b      	adcs	r3, r3
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800372c:	4641      	mov	r1, r8
 800372e:	1851      	adds	r1, r2, r1
 8003730:	6139      	str	r1, [r7, #16]
 8003732:	4649      	mov	r1, r9
 8003734:	414b      	adcs	r3, r1
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003744:	4659      	mov	r1, fp
 8003746:	00cb      	lsls	r3, r1, #3
 8003748:	4651      	mov	r1, sl
 800374a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800374e:	4651      	mov	r1, sl
 8003750:	00ca      	lsls	r2, r1, #3
 8003752:	4610      	mov	r0, r2
 8003754:	4619      	mov	r1, r3
 8003756:	4603      	mov	r3, r0
 8003758:	4642      	mov	r2, r8
 800375a:	189b      	adds	r3, r3, r2
 800375c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003760:	464b      	mov	r3, r9
 8003762:	460a      	mov	r2, r1
 8003764:	eb42 0303 	adc.w	r3, r2, r3
 8003768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003776:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003784:	4649      	mov	r1, r9
 8003786:	008b      	lsls	r3, r1, #2
 8003788:	4641      	mov	r1, r8
 800378a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800378e:	4641      	mov	r1, r8
 8003790:	008a      	lsls	r2, r1, #2
 8003792:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003796:	f7fc fd25 	bl	80001e4 <__aeabi_uldivmod>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4611      	mov	r1, r2
 80037a0:	4b38      	ldr	r3, [pc, #224]	@ (8003884 <UART_SetConfig+0x4e4>)
 80037a2:	fba3 2301 	umull	r2, r3, r3, r1
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	2264      	movs	r2, #100	@ 0x64
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	1acb      	subs	r3, r1, r3
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	3332      	adds	r3, #50	@ 0x32
 80037b4:	4a33      	ldr	r2, [pc, #204]	@ (8003884 <UART_SetConfig+0x4e4>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037c0:	441c      	add	r4, r3
 80037c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037c6:	2200      	movs	r2, #0
 80037c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80037ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80037cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80037d0:	4642      	mov	r2, r8
 80037d2:	464b      	mov	r3, r9
 80037d4:	1891      	adds	r1, r2, r2
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	415b      	adcs	r3, r3
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037e0:	4641      	mov	r1, r8
 80037e2:	1851      	adds	r1, r2, r1
 80037e4:	6039      	str	r1, [r7, #0]
 80037e6:	4649      	mov	r1, r9
 80037e8:	414b      	adcs	r3, r1
 80037ea:	607b      	str	r3, [r7, #4]
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037f8:	4659      	mov	r1, fp
 80037fa:	00cb      	lsls	r3, r1, #3
 80037fc:	4651      	mov	r1, sl
 80037fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003802:	4651      	mov	r1, sl
 8003804:	00ca      	lsls	r2, r1, #3
 8003806:	4610      	mov	r0, r2
 8003808:	4619      	mov	r1, r3
 800380a:	4603      	mov	r3, r0
 800380c:	4642      	mov	r2, r8
 800380e:	189b      	adds	r3, r3, r2
 8003810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003812:	464b      	mov	r3, r9
 8003814:	460a      	mov	r2, r1
 8003816:	eb42 0303 	adc.w	r3, r2, r3
 800381a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	663b      	str	r3, [r7, #96]	@ 0x60
 8003826:	667a      	str	r2, [r7, #100]	@ 0x64
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003834:	4649      	mov	r1, r9
 8003836:	008b      	lsls	r3, r1, #2
 8003838:	4641      	mov	r1, r8
 800383a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800383e:	4641      	mov	r1, r8
 8003840:	008a      	lsls	r2, r1, #2
 8003842:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003846:	f7fc fccd 	bl	80001e4 <__aeabi_uldivmod>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4b0d      	ldr	r3, [pc, #52]	@ (8003884 <UART_SetConfig+0x4e4>)
 8003850:	fba3 1302 	umull	r1, r3, r3, r2
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	2164      	movs	r1, #100	@ 0x64
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	3332      	adds	r3, #50	@ 0x32
 8003862:	4a08      	ldr	r2, [pc, #32]	@ (8003884 <UART_SetConfig+0x4e4>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	f003 020f 	and.w	r2, r3, #15
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4422      	add	r2, r4
 8003876:	609a      	str	r2, [r3, #8]
}
 8003878:	bf00      	nop
 800387a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800387e:	46bd      	mov	sp, r7
 8003880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003884:	51eb851f 	.word	0x51eb851f

08003888 <memset>:
 8003888:	4402      	add	r2, r0
 800388a:	4603      	mov	r3, r0
 800388c:	4293      	cmp	r3, r2
 800388e:	d100      	bne.n	8003892 <memset+0xa>
 8003890:	4770      	bx	lr
 8003892:	f803 1b01 	strb.w	r1, [r3], #1
 8003896:	e7f9      	b.n	800388c <memset+0x4>

08003898 <__libc_init_array>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	4d0d      	ldr	r5, [pc, #52]	@ (80038d0 <__libc_init_array+0x38>)
 800389c:	4c0d      	ldr	r4, [pc, #52]	@ (80038d4 <__libc_init_array+0x3c>)
 800389e:	1b64      	subs	r4, r4, r5
 80038a0:	10a4      	asrs	r4, r4, #2
 80038a2:	2600      	movs	r6, #0
 80038a4:	42a6      	cmp	r6, r4
 80038a6:	d109      	bne.n	80038bc <__libc_init_array+0x24>
 80038a8:	4d0b      	ldr	r5, [pc, #44]	@ (80038d8 <__libc_init_array+0x40>)
 80038aa:	4c0c      	ldr	r4, [pc, #48]	@ (80038dc <__libc_init_array+0x44>)
 80038ac:	f000 f818 	bl	80038e0 <_init>
 80038b0:	1b64      	subs	r4, r4, r5
 80038b2:	10a4      	asrs	r4, r4, #2
 80038b4:	2600      	movs	r6, #0
 80038b6:	42a6      	cmp	r6, r4
 80038b8:	d105      	bne.n	80038c6 <__libc_init_array+0x2e>
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c0:	4798      	blx	r3
 80038c2:	3601      	adds	r6, #1
 80038c4:	e7ee      	b.n	80038a4 <__libc_init_array+0xc>
 80038c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ca:	4798      	blx	r3
 80038cc:	3601      	adds	r6, #1
 80038ce:	e7f2      	b.n	80038b6 <__libc_init_array+0x1e>
 80038d0:	08003934 	.word	0x08003934
 80038d4:	08003934 	.word	0x08003934
 80038d8:	08003934 	.word	0x08003934
 80038dc:	08003938 	.word	0x08003938

080038e0 <_init>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr

080038ec <_fini>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr
