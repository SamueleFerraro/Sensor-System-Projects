
Homework4a_UART_TX_Name.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003c3c  08003c3c  00004c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c5c  08003c5c  0000501c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c5c  08003c5c  00004c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c64  08003c64  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c64  08003c64  00004c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c68  08003c68  00004c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003c6c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000001c  08003c88  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003c88  0000512c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd9c  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c27  00000000  00000000  00011de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00013a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000993  00000000  00000000  00014640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001617f  00000000  00000000  00014fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d745  00000000  00000000  0002b152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d506  00000000  00000000  00038897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5d9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003384  00000000  00000000  000c5de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000c9164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003c24 	.word	0x08003c24

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08003c24 	.word	0x08003c24

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b988 	b.w	800050c <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	468e      	mov	lr, r1
 800021c:	4604      	mov	r4, r0
 800021e:	4688      	mov	r8, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14a      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d962      	bls.n	80002f0 <__udivmoddi4+0xdc>
 800022a:	fab2 f682 	clz	r6, r2
 800022e:	b14e      	cbz	r6, 8000244 <__udivmoddi4+0x30>
 8000230:	f1c6 0320 	rsb	r3, r6, #32
 8000234:	fa01 f806 	lsl.w	r8, r1, r6
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	40b7      	lsls	r7, r6
 800023e:	ea43 0808 	orr.w	r8, r3, r8
 8000242:	40b4      	lsls	r4, r6
 8000244:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000248:	fa1f fc87 	uxth.w	ip, r7
 800024c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000250:	0c23      	lsrs	r3, r4, #16
 8000252:	fb0e 8811 	mls	r8, lr, r1, r8
 8000256:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025a:	fb01 f20c 	mul.w	r2, r1, ip
 800025e:	429a      	cmp	r2, r3
 8000260:	d909      	bls.n	8000276 <__udivmoddi4+0x62>
 8000262:	18fb      	adds	r3, r7, r3
 8000264:	f101 30ff 	add.w	r0, r1, #4294967295
 8000268:	f080 80ea 	bcs.w	8000440 <__udivmoddi4+0x22c>
 800026c:	429a      	cmp	r2, r3
 800026e:	f240 80e7 	bls.w	8000440 <__udivmoddi4+0x22c>
 8000272:	3902      	subs	r1, #2
 8000274:	443b      	add	r3, r7
 8000276:	1a9a      	subs	r2, r3, r2
 8000278:	b2a3      	uxth	r3, r4
 800027a:	fbb2 f0fe 	udiv	r0, r2, lr
 800027e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000286:	fb00 fc0c 	mul.w	ip, r0, ip
 800028a:	459c      	cmp	ip, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x8e>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f100 32ff 	add.w	r2, r0, #4294967295
 8000294:	f080 80d6 	bcs.w	8000444 <__udivmoddi4+0x230>
 8000298:	459c      	cmp	ip, r3
 800029a:	f240 80d3 	bls.w	8000444 <__udivmoddi4+0x230>
 800029e:	443b      	add	r3, r7
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a6:	eba3 030c 	sub.w	r3, r3, ip
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa2>
 80002ae:	40f3      	lsrs	r3, r6
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xb6>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb0>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x14c>
 80002d2:	4573      	cmp	r3, lr
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xc8>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 8105 	bhi.w	80004e6 <__udivmoddi4+0x2d2>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4690      	mov	r8, r2
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e5      	beq.n	80002b6 <__udivmoddi4+0xa2>
 80002ea:	e9c5 4800 	strd	r4, r8, [r5]
 80002ee:	e7e2      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f000 8090 	beq.w	8000416 <__udivmoddi4+0x202>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f040 80a4 	bne.w	8000448 <__udivmoddi4+0x234>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	0c03      	lsrs	r3, r0, #16
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	b280      	uxth	r0, r0
 800030a:	b2bc      	uxth	r4, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000312:	fb0e 221c 	mls	r2, lr, ip, r2
 8000316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031a:	fb04 f20c 	mul.w	r2, r4, ip
 800031e:	429a      	cmp	r2, r3
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x11e>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x11c>
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 80e0 	bhi.w	80004f0 <__udivmoddi4+0x2dc>
 8000330:	46c4      	mov	ip, r8
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	fbb3 f2fe 	udiv	r2, r3, lr
 8000338:	fb0e 3312 	mls	r3, lr, r2, r3
 800033c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000340:	fb02 f404 	mul.w	r4, r2, r4
 8000344:	429c      	cmp	r4, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x144>
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	f102 30ff 	add.w	r0, r2, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x142>
 8000350:	429c      	cmp	r4, r3
 8000352:	f200 80ca 	bhi.w	80004ea <__udivmoddi4+0x2d6>
 8000356:	4602      	mov	r2, r0
 8000358:	1b1b      	subs	r3, r3, r4
 800035a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x98>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa0e f401 	lsl.w	r4, lr, r1
 8000370:	fa20 f306 	lsr.w	r3, r0, r6
 8000374:	fa2e fe06 	lsr.w	lr, lr, r6
 8000378:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fa00 f801 	lsl.w	r8, r0, r1
 8000382:	fa1f fc87 	uxth.w	ip, r7
 8000386:	fbbe f0f9 	udiv	r0, lr, r9
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000390:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000394:	fb00 fe0c 	mul.w	lr, r0, ip
 8000398:	45a6      	cmp	lr, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1a0>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a6:	f080 809c 	bcs.w	80004e2 <__udivmoddi4+0x2ce>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f240 8099 	bls.w	80004e2 <__udivmoddi4+0x2ce>
 80003b0:	3802      	subs	r0, #2
 80003b2:	443c      	add	r4, r7
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	fa1f fe83 	uxth.w	lr, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003cc:	45a4      	cmp	ip, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1ce>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d6:	f080 8082 	bcs.w	80004de <__udivmoddi4+0x2ca>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d97f      	bls.n	80004de <__udivmoddi4+0x2ca>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e6:	eba4 040c 	sub.w	r4, r4, ip
 80003ea:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ee:	4564      	cmp	r4, ip
 80003f0:	4673      	mov	r3, lr
 80003f2:	46e1      	mov	r9, ip
 80003f4:	d362      	bcc.n	80004bc <__udivmoddi4+0x2a8>
 80003f6:	d05f      	beq.n	80004b8 <__udivmoddi4+0x2a4>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x1fe>
 80003fa:	ebb8 0203 	subs.w	r2, r8, r3
 80003fe:	eb64 0409 	sbc.w	r4, r4, r9
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	fa22 f301 	lsr.w	r3, r2, r1
 800040a:	431e      	orrs	r6, r3
 800040c:	40cc      	lsrs	r4, r1
 800040e:	e9c5 6400 	strd	r6, r4, [r5]
 8000412:	2100      	movs	r1, #0
 8000414:	e74f      	b.n	80002b6 <__udivmoddi4+0xa2>
 8000416:	fbb1 fcf2 	udiv	ip, r1, r2
 800041a:	0c01      	lsrs	r1, r0, #16
 800041c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000420:	b280      	uxth	r0, r0
 8000422:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000426:	463b      	mov	r3, r7
 8000428:	4638      	mov	r0, r7
 800042a:	463c      	mov	r4, r7
 800042c:	46b8      	mov	r8, r7
 800042e:	46be      	mov	lr, r7
 8000430:	2620      	movs	r6, #32
 8000432:	fbb1 f1f7 	udiv	r1, r1, r7
 8000436:	eba2 0208 	sub.w	r2, r2, r8
 800043a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043e:	e766      	b.n	800030e <__udivmoddi4+0xfa>
 8000440:	4601      	mov	r1, r0
 8000442:	e718      	b.n	8000276 <__udivmoddi4+0x62>
 8000444:	4610      	mov	r0, r2
 8000446:	e72c      	b.n	80002a2 <__udivmoddi4+0x8e>
 8000448:	f1c6 0220 	rsb	r2, r6, #32
 800044c:	fa2e f302 	lsr.w	r3, lr, r2
 8000450:	40b7      	lsls	r7, r6
 8000452:	40b1      	lsls	r1, r6
 8000454:	fa20 f202 	lsr.w	r2, r0, r2
 8000458:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800045c:	430a      	orrs	r2, r1
 800045e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000462:	b2bc      	uxth	r4, r7
 8000464:	fb0e 3318 	mls	r3, lr, r8, r3
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb08 f904 	mul.w	r9, r8, r4
 8000472:	40b0      	lsls	r0, r6
 8000474:	4589      	cmp	r9, r1
 8000476:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047a:	b280      	uxth	r0, r0
 800047c:	d93e      	bls.n	80004fc <__udivmoddi4+0x2e8>
 800047e:	1879      	adds	r1, r7, r1
 8000480:	f108 3cff 	add.w	ip, r8, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x276>
 8000486:	4589      	cmp	r9, r1
 8000488:	d81f      	bhi.n	80004ca <__udivmoddi4+0x2b6>
 800048a:	eba1 0109 	sub.w	r1, r1, r9
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fb09 f804 	mul.w	r8, r9, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	b292      	uxth	r2, r2
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d229      	bcs.n	80004f8 <__udivmoddi4+0x2e4>
 80004a4:	18ba      	adds	r2, r7, r2
 80004a6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004aa:	d2c4      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d2c2      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004b0:	f1a9 0102 	sub.w	r1, r9, #2
 80004b4:	443a      	add	r2, r7
 80004b6:	e7be      	b.n	8000436 <__udivmoddi4+0x222>
 80004b8:	45f0      	cmp	r8, lr
 80004ba:	d29d      	bcs.n	80003f8 <__udivmoddi4+0x1e4>
 80004bc:	ebbe 0302 	subs.w	r3, lr, r2
 80004c0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c4:	3801      	subs	r0, #1
 80004c6:	46e1      	mov	r9, ip
 80004c8:	e796      	b.n	80003f8 <__udivmoddi4+0x1e4>
 80004ca:	eba7 0909 	sub.w	r9, r7, r9
 80004ce:	4449      	add	r1, r9
 80004d0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d8:	fb09 f804 	mul.w	r8, r9, r4
 80004dc:	e7db      	b.n	8000496 <__udivmoddi4+0x282>
 80004de:	4673      	mov	r3, lr
 80004e0:	e77f      	b.n	80003e2 <__udivmoddi4+0x1ce>
 80004e2:	4650      	mov	r0, sl
 80004e4:	e766      	b.n	80003b4 <__udivmoddi4+0x1a0>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e6fd      	b.n	80002e6 <__udivmoddi4+0xd2>
 80004ea:	443b      	add	r3, r7
 80004ec:	3a02      	subs	r2, #2
 80004ee:	e733      	b.n	8000358 <__udivmoddi4+0x144>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	443b      	add	r3, r7
 80004f6:	e71c      	b.n	8000332 <__udivmoddi4+0x11e>
 80004f8:	4649      	mov	r1, r9
 80004fa:	e79c      	b.n	8000436 <__udivmoddi4+0x222>
 80004fc:	eba1 0109 	sub.w	r1, r1, r9
 8000500:	46c4      	mov	ip, r8
 8000502:	fbb1 f9fe 	udiv	r9, r1, lr
 8000506:	fb09 f804 	mul.w	r8, r9, r4
 800050a:	e7c4      	b.n	8000496 <__udivmoddi4+0x282>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Callback of TIM2 is used to transmit every 1 second (TIM2 turns on ISR every 1s)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	if(htim==&htim2){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a08      	ldr	r2, [pc, #32]	@ (800053c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d109      	bne.n	8000534 <HAL_TIM_PeriodElapsedCallback+0x24>
		 HAL_UART_Transmit_DMA(&huart2, name, strlen(name));
 8000520:	4807      	ldr	r0, [pc, #28]	@ (8000540 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000522:	f7ff fe57 	bl	80001d4 <strlen>
 8000526:	4603      	mov	r3, r0
 8000528:	b29b      	uxth	r3, r3
 800052a:	461a      	mov	r2, r3
 800052c:	4904      	ldr	r1, [pc, #16]	@ (8000540 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800052e:	4805      	ldr	r0, [pc, #20]	@ (8000544 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000530:	f002 fb38 	bl	8002ba4 <HAL_UART_Transmit_DMA>
	}
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000038 	.word	0x20000038
 8000540:	20000000 	.word	0x20000000
 8000544:	20000080 	.word	0x20000080

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fae4 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f810 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 f912 	bl	800077c <MX_GPIO_Init>
  MX_DMA_Init();
 8000558:	f000 f8f0 	bl	800073c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800055c:	f000 f8c4 	bl	80006e8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000560:	f000 f874 	bl	800064c <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  //Be careful! Timer have to start after the initialization!
  HAL_TIM_Base_Start_IT(&htim2);
 8000564:	4802      	ldr	r0, [pc, #8]	@ (8000570 <main+0x28>)
 8000566:	f001 fee3 	bl	8002330 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056a:	bf00      	nop
 800056c:	e7fd      	b.n	800056a <main+0x22>
 800056e:	bf00      	nop
 8000570:	20000038 	.word	0x20000038

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	@ 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	@ 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 fb22 	bl	8003bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b29      	ldr	r3, [pc, #164]	@ (8000644 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	4a28      	ldr	r2, [pc, #160]	@ (8000644 <SystemClock_Config+0xd0>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a8:	4b26      	ldr	r3, [pc, #152]	@ (8000644 <SystemClock_Config+0xd0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b23      	ldr	r3, [pc, #140]	@ (8000648 <SystemClock_Config+0xd4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005c0:	4a21      	ldr	r2, [pc, #132]	@ (8000648 <SystemClock_Config+0xd4>)
 80005c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <SystemClock_Config+0xd4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005e8:	2310      	movs	r3, #16
 80005ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f2:	2304      	movs	r3, #4
 80005f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f6:	2307      	movs	r3, #7
 80005f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 f9ae 	bl	8001960 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800060a:	f000 f925 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2302      	movs	r3, #2
 8000614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2102      	movs	r1, #2
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fc10 	bl	8001e50 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000636:	f000 f90f 	bl	8000858 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	@ 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000660:	463b      	mov	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000668:	4b1e      	ldr	r3, [pc, #120]	@ (80006e4 <MX_TIM2_Init+0x98>)
 800066a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800066e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000670:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <MX_TIM2_Init+0x98>)
 8000672:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000676:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000678:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_TIM2_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800067e:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <MX_TIM2_Init+0x98>)
 8000680:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000684:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_TIM2_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_TIM2_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000692:	4814      	ldr	r0, [pc, #80]	@ (80006e4 <MX_TIM2_Init+0x98>)
 8000694:	f001 fdfc 	bl	8002290 <HAL_TIM_Base_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800069e:	f000 f8db 	bl	8000858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	4619      	mov	r1, r3
 80006ae:	480d      	ldr	r0, [pc, #52]	@ (80006e4 <MX_TIM2_Init+0x98>)
 80006b0:	f001 ff90 	bl	80025d4 <HAL_TIM_ConfigClockSource>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006ba:	f000 f8cd 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	4619      	mov	r1, r3
 80006ca:	4806      	ldr	r0, [pc, #24]	@ (80006e4 <MX_TIM2_Init+0x98>)
 80006cc:	f002 f998 	bl	8002a00 <HAL_TIMEx_MasterConfigSynchronization>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006d6:	f000 f8bf 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000038 	.word	0x20000038

080006e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ec:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_USART2_UART_Init+0x4c>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <MX_USART2_UART_Init+0x50>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f2:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <MX_USART2_UART_Init+0x4c>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_USART2_UART_Init+0x4c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	@ (8000734 <MX_USART2_UART_Init+0x4c>)
 8000720:	f002 f9f0 	bl	8002b04 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800072a:	f000 f895 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000080 	.word	0x20000080
 8000738:	40004400 	.word	0x40004400

0800073c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_DMA_Init+0x3c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a0b      	ldr	r2, [pc, #44]	@ (8000778 <MX_DMA_Init+0x3c>)
 800074c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_DMA_Init+0x3c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	2011      	movs	r0, #17
 8000764:	f000 fb25 	bl	8000db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000768:	2011      	movs	r0, #17
 800076a:	f000 fb3e 	bl	8000dea <HAL_NVIC_EnableIRQ>

}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	@ 0x28
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b2d      	ldr	r3, [pc, #180]	@ (800084c <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a2c      	ldr	r2, [pc, #176]	@ (800084c <MX_GPIO_Init+0xd0>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b26      	ldr	r3, [pc, #152]	@ (800084c <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a25      	ldr	r2, [pc, #148]	@ (800084c <MX_GPIO_Init+0xd0>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b23      	ldr	r3, [pc, #140]	@ (800084c <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a1e      	ldr	r2, [pc, #120]	@ (800084c <MX_GPIO_Init+0xd0>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b18      	ldr	r3, [pc, #96]	@ (800084c <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a17      	ldr	r2, [pc, #92]	@ (800084c <MX_GPIO_Init+0xd0>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2120      	movs	r1, #32
 8000806:	4812      	ldr	r0, [pc, #72]	@ (8000850 <MX_GPIO_Init+0xd4>)
 8000808:	f001 f890 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000812:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	480c      	ldr	r0, [pc, #48]	@ (8000854 <MX_GPIO_Init+0xd8>)
 8000824:	f000 fefe 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000828:	2320      	movs	r3, #32
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4804      	ldr	r0, [pc, #16]	@ (8000850 <MX_GPIO_Init+0xd4>)
 8000840:	f000 fef0 	bl	8001624 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	@ 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020000 	.word	0x40020000
 8000854:	40020800 	.word	0x40020800

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000872:	4a0f      	ldr	r2, [pc, #60]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000878:	6453      	str	r3, [r2, #68]	@ 0x44
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	4a08      	ldr	r2, [pc, #32]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	@ 0x40
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008a2:	2007      	movs	r0, #7
 80008a4:	f000 fa7a 	bl	8000d9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800

080008b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008c4:	d115      	bne.n	80008f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <HAL_TIM_Base_MspInit+0x48>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	4a0b      	ldr	r2, [pc, #44]	@ (80008fc <HAL_TIM_Base_MspInit+0x48>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <HAL_TIM_Base_MspInit+0x48>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	201c      	movs	r0, #28
 80008e8:	f000 fa63 	bl	8000db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008ec:	201c      	movs	r0, #28
 80008ee:	f000 fa7c 	bl	8000dea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	@ 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a34      	ldr	r2, [pc, #208]	@ (80009f0 <HAL_UART_MspInit+0xf0>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d162      	bne.n	80009e8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b33      	ldr	r3, [pc, #204]	@ (80009f4 <HAL_UART_MspInit+0xf4>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	4a32      	ldr	r2, [pc, #200]	@ (80009f4 <HAL_UART_MspInit+0xf4>)
 800092c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000930:	6413      	str	r3, [r2, #64]	@ 0x40
 8000932:	4b30      	ldr	r3, [pc, #192]	@ (80009f4 <HAL_UART_MspInit+0xf4>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b2c      	ldr	r3, [pc, #176]	@ (80009f4 <HAL_UART_MspInit+0xf4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a2b      	ldr	r2, [pc, #172]	@ (80009f4 <HAL_UART_MspInit+0xf4>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b29      	ldr	r3, [pc, #164]	@ (80009f4 <HAL_UART_MspInit+0xf4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800095a:	230c      	movs	r3, #12
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096a:	2307      	movs	r3, #7
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4820      	ldr	r0, [pc, #128]	@ (80009f8 <HAL_UART_MspInit+0xf8>)
 8000976:	f000 fe55 	bl	8001624 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800097a:	4b20      	ldr	r3, [pc, #128]	@ (80009fc <HAL_UART_MspInit+0xfc>)
 800097c:	4a20      	ldr	r2, [pc, #128]	@ (8000a00 <HAL_UART_MspInit+0x100>)
 800097e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000980:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <HAL_UART_MspInit+0xfc>)
 8000982:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000986:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000988:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <HAL_UART_MspInit+0xfc>)
 800098a:	2240      	movs	r2, #64	@ 0x40
 800098c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800098e:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <HAL_UART_MspInit+0xfc>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000994:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <HAL_UART_MspInit+0xfc>)
 8000996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800099a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800099c:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <HAL_UART_MspInit+0xfc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009a2:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <HAL_UART_MspInit+0xfc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <HAL_UART_MspInit+0xfc>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80009ae:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <HAL_UART_MspInit+0xfc>)
 80009b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <HAL_UART_MspInit+0xfc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80009bc:	480f      	ldr	r0, [pc, #60]	@ (80009fc <HAL_UART_MspInit+0xfc>)
 80009be:	f000 fa2f 	bl	8000e20 <HAL_DMA_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80009c8:	f7ff ff46 	bl	8000858 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a0b      	ldr	r2, [pc, #44]	@ (80009fc <HAL_UART_MspInit+0xfc>)
 80009d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80009d2:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <HAL_UART_MspInit+0xfc>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2026      	movs	r0, #38	@ 0x26
 80009de:	f000 f9e8 	bl	8000db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009e2:	2026      	movs	r0, #38	@ 0x26
 80009e4:	f000 fa01 	bl	8000dea <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	@ 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40004400 	.word	0x40004400
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000
 80009fc:	200000c8 	.word	0x200000c8
 8000a00:	400260a0 	.word	0x400260a0

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <NMI_Handler+0x4>

08000a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5a:	f000 f8af 	bl	8000bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a68:	4802      	ldr	r0, [pc, #8]	@ (8000a74 <DMA1_Stream6_IRQHandler+0x10>)
 8000a6a:	f000 fb71 	bl	8001150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000c8 	.word	0x200000c8

08000a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a7c:	4802      	ldr	r0, [pc, #8]	@ (8000a88 <TIM2_IRQHandler+0x10>)
 8000a7e:	f001 fcb9 	bl	80023f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000038 	.word	0x20000038

08000a8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a90:	4802      	ldr	r0, [pc, #8]	@ (8000a9c <USART2_IRQHandler+0x10>)
 8000a92:	f002 f8f7 	bl	8002c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000080 	.word	0x20000080

08000aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <SystemInit+0x20>)
 8000aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ac0 <SystemInit+0x20>)
 8000aac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ac4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000afc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ac8:	f7ff ffea 	bl	8000aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000acc:	480c      	ldr	r0, [pc, #48]	@ (8000b00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ace:	490d      	ldr	r1, [pc, #52]	@ (8000b04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000af2:	f003 f873 	bl	8003bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af6:	f7ff fd27 	bl	8000548 <main>
  bx  lr    
 8000afa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000afc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b08:	08003c6c 	.word	0x08003c6c
  ldr r2, =_sbss
 8000b0c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b10:	2000012c 	.word	0x2000012c

08000b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <HAL_Init+0x40>)
 8000b22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b28:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <HAL_Init+0x40>)
 8000b2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <HAL_Init+0x40>)
 8000b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b40:	2003      	movs	r0, #3
 8000b42:	f000 f92b 	bl	8000d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f000 f808 	bl	8000b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4c:	f7ff fe8a 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023c00 	.word	0x40023c00

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <HAL_InitTick+0x54>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_InitTick+0x58>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f943 	bl	8000e06 <HAL_SYSTICK_Config>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00e      	b.n	8000ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d80a      	bhi.n	8000ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f000 f90b 	bl	8000db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b9c:	4a06      	ldr	r2, [pc, #24]	@ (8000bb8 <HAL_InitTick+0x5c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000010 	.word	0x20000010
 8000bb4:	20000018 	.word	0x20000018
 8000bb8:	20000014 	.word	0x20000014

08000bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_IncTick+0x20>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_IncTick+0x24>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a04      	ldr	r2, [pc, #16]	@ (8000be0 <HAL_IncTick+0x24>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000018 	.word	0x20000018
 8000be0:	20000128 	.word	0x20000128

08000be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <HAL_GetTick+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000128 	.word	0x20000128

08000bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	@ (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 021f 	and.w	r2, r3, #31
 8000c78:	4907      	ldr	r1, [pc, #28]	@ (8000c98 <__NVIC_EnableIRQ+0x38>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	2001      	movs	r0, #1
 8000c82:	fa00 f202 	lsl.w	r2, r0, r2
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	@ (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	@ (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	@ 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	@ 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d68:	d301      	bcc.n	8000d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00f      	b.n	8000d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <SysTick_Config+0x40>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d76:	210f      	movs	r1, #15
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f7ff ff8e 	bl	8000c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <SysTick_Config+0x40>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d86:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <SysTick_Config+0x40>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ff29 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc4:	f7ff ff3e 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	68b9      	ldr	r1, [r7, #8]
 8000dce:	6978      	ldr	r0, [r7, #20]
 8000dd0:	f7ff ff8e 	bl	8000cf0 <NVIC_EncodePriority>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff5d 	bl	8000c9c <__NVIC_SetPriority>
}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff31 	bl	8000c60 <__NVIC_EnableIRQ>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffa2 	bl	8000d58 <SysTick_Config>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff feda 	bl	8000be4 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d101      	bne.n	8000e3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e099      	b.n	8000f70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2202      	movs	r2, #2
 8000e40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0201 	bic.w	r2, r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e5c:	e00f      	b.n	8000e7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e5e:	f7ff fec1 	bl	8000be4 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d908      	bls.n	8000e7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2220      	movs	r2, #32
 8000e70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2203      	movs	r2, #3
 8000e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e078      	b.n	8000f70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1e8      	bne.n	8000e5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	4b38      	ldr	r3, [pc, #224]	@ (8000f78 <HAL_DMA_Init+0x158>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d107      	bne.n	8000ee8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	f023 0307 	bic.w	r3, r3, #7
 8000efe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d117      	bne.n	8000f42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00e      	beq.n	8000f42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 fb01 	bl	800152c <DMA_CheckFifoParam>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d008      	beq.n	8000f42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2240      	movs	r2, #64	@ 0x40
 8000f34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e016      	b.n	8000f70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 fab8 	bl	80014c0 <DMA_CalcBaseAndBitshift>
 8000f50:	4603      	mov	r3, r0
 8000f52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f58:	223f      	movs	r2, #63	@ 0x3f
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	f010803f 	.word	0xf010803f

08000f7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d101      	bne.n	8000fa2 <HAL_DMA_Start_IT+0x26>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e040      	b.n	8001024 <HAL_DMA_Start_IT+0xa8>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d12f      	bne.n	8001016 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2202      	movs	r2, #2
 8000fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 fa4a 	bl	8001464 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fd4:	223f      	movs	r2, #63	@ 0x3f
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0216 	orr.w	r2, r2, #22
 8000fea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0208 	orr.w	r2, r2, #8
 8001002:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0201 	orr.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	e005      	b.n	8001022 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800101e:	2302      	movs	r3, #2
 8001020:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001022:	7dfb      	ldrb	r3, [r7, #23]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001038:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800103a:	f7ff fdd3 	bl	8000be4 <HAL_GetTick>
 800103e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d008      	beq.n	800105e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2280      	movs	r2, #128	@ 0x80
 8001050:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e052      	b.n	8001104 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0216 	bic.w	r2, r2, #22
 800106c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	695a      	ldr	r2, [r3, #20]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800107c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	2b00      	cmp	r3, #0
 8001084:	d103      	bne.n	800108e <HAL_DMA_Abort+0x62>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0208 	bic.w	r2, r2, #8
 800109c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0201 	bic.w	r2, r2, #1
 80010ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ae:	e013      	b.n	80010d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010b0:	f7ff fd98 	bl	8000be4 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b05      	cmp	r3, #5
 80010bc:	d90c      	bls.n	80010d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2220      	movs	r2, #32
 80010c2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2203      	movs	r2, #3
 80010c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e015      	b.n	8001104 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1e4      	bne.n	80010b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010ea:	223f      	movs	r2, #63	@ 0x3f
 80010ec:	409a      	lsls	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d004      	beq.n	800112a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2280      	movs	r2, #128	@ 0x80
 8001124:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00c      	b.n	8001144 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2205      	movs	r2, #5
 800112e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0201 	bic.w	r2, r2, #1
 8001140:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800115c:	4b8e      	ldr	r3, [pc, #568]	@ (8001398 <HAL_DMA_IRQHandler+0x248>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a8e      	ldr	r2, [pc, #568]	@ (800139c <HAL_DMA_IRQHandler+0x24c>)
 8001162:	fba2 2303 	umull	r2, r3, r2, r3
 8001166:	0a9b      	lsrs	r3, r3, #10
 8001168:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800117a:	2208      	movs	r2, #8
 800117c:	409a      	lsls	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4013      	ands	r3, r2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d01a      	beq.n	80011bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d013      	beq.n	80011bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0204 	bic.w	r2, r2, #4
 80011a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a8:	2208      	movs	r2, #8
 80011aa:	409a      	lsls	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011b4:	f043 0201 	orr.w	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c0:	2201      	movs	r2, #1
 80011c2:	409a      	lsls	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d012      	beq.n	80011f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00b      	beq.n	80011f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011de:	2201      	movs	r2, #1
 80011e0:	409a      	lsls	r2, r3
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ea:	f043 0202 	orr.w	r2, r3, #2
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011f6:	2204      	movs	r2, #4
 80011f8:	409a      	lsls	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d012      	beq.n	8001228 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00b      	beq.n	8001228 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001214:	2204      	movs	r2, #4
 8001216:	409a      	lsls	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001220:	f043 0204 	orr.w	r2, r3, #4
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800122c:	2210      	movs	r2, #16
 800122e:	409a      	lsls	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4013      	ands	r3, r2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d043      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d03c      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800124a:	2210      	movs	r2, #16
 800124c:	409a      	lsls	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d018      	beq.n	8001292 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d108      	bne.n	8001280 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	2b00      	cmp	r3, #0
 8001274:	d024      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	4798      	blx	r3
 800127e:	e01f      	b.n	80012c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001284:	2b00      	cmp	r3, #0
 8001286:	d01b      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	4798      	blx	r3
 8001290:	e016      	b.n	80012c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d107      	bne.n	80012b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0208 	bic.w	r2, r2, #8
 80012ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012c4:	2220      	movs	r2, #32
 80012c6:	409a      	lsls	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 808f 	beq.w	80013f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 8087 	beq.w	80013f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e6:	2220      	movs	r2, #32
 80012e8:	409a      	lsls	r2, r3
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d136      	bne.n	8001368 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0216 	bic.w	r2, r2, #22
 8001308:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	695a      	ldr	r2, [r3, #20]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001318:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	2b00      	cmp	r3, #0
 8001320:	d103      	bne.n	800132a <HAL_DMA_IRQHandler+0x1da>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0208 	bic.w	r2, r2, #8
 8001338:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133e:	223f      	movs	r2, #63	@ 0x3f
 8001340:	409a      	lsls	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800135a:	2b00      	cmp	r3, #0
 800135c:	d07e      	beq.n	800145c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
        }
        return;
 8001366:	e079      	b.n	800145c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d01d      	beq.n	80013b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10d      	bne.n	80013a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001388:	2b00      	cmp	r3, #0
 800138a:	d031      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	4798      	blx	r3
 8001394:	e02c      	b.n	80013f0 <HAL_DMA_IRQHandler+0x2a0>
 8001396:	bf00      	nop
 8001398:	20000010 	.word	0x20000010
 800139c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d023      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	4798      	blx	r3
 80013b0:	e01e      	b.n	80013f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10f      	bne.n	80013e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0210 	bic.w	r2, r2, #16
 80013ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d032      	beq.n	800145e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d022      	beq.n	800144a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2205      	movs	r2, #5
 8001408:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0201 	bic.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	3301      	adds	r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	429a      	cmp	r2, r3
 8001426:	d307      	bcc.n	8001438 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f2      	bne.n	800141c <HAL_DMA_IRQHandler+0x2cc>
 8001436:	e000      	b.n	800143a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001438:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	2b00      	cmp	r3, #0
 8001450:	d005      	beq.n	800145e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	4798      	blx	r3
 800145a:	e000      	b.n	800145e <HAL_DMA_IRQHandler+0x30e>
        return;
 800145c:	bf00      	nop
    }
  }
}
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001480:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b40      	cmp	r3, #64	@ 0x40
 8001490:	d108      	bne.n	80014a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014a2:	e007      	b.n	80014b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	60da      	str	r2, [r3, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	3b10      	subs	r3, #16
 80014d0:	4a14      	ldr	r2, [pc, #80]	@ (8001524 <DMA_CalcBaseAndBitshift+0x64>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014da:	4a13      	ldr	r2, [pc, #76]	@ (8001528 <DMA_CalcBaseAndBitshift+0x68>)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d909      	bls.n	8001502 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80014f6:	f023 0303 	bic.w	r3, r3, #3
 80014fa:	1d1a      	adds	r2, r3, #4
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8001500:	e007      	b.n	8001512 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800150a:	f023 0303 	bic.w	r3, r3, #3
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	aaaaaaab 	.word	0xaaaaaaab
 8001528:	08003c54 	.word	0x08003c54

0800152c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d11f      	bne.n	8001586 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d856      	bhi.n	80015fa <DMA_CheckFifoParam+0xce>
 800154c:	a201      	add	r2, pc, #4	@ (adr r2, 8001554 <DMA_CheckFifoParam+0x28>)
 800154e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001552:	bf00      	nop
 8001554:	08001565 	.word	0x08001565
 8001558:	08001577 	.word	0x08001577
 800155c:	08001565 	.word	0x08001565
 8001560:	080015fb 	.word	0x080015fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001568:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d046      	beq.n	80015fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001574:	e043      	b.n	80015fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800157e:	d140      	bne.n	8001602 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001584:	e03d      	b.n	8001602 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800158e:	d121      	bne.n	80015d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b03      	cmp	r3, #3
 8001594:	d837      	bhi.n	8001606 <DMA_CheckFifoParam+0xda>
 8001596:	a201      	add	r2, pc, #4	@ (adr r2, 800159c <DMA_CheckFifoParam+0x70>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	080015ad 	.word	0x080015ad
 80015a0:	080015b3 	.word	0x080015b3
 80015a4:	080015ad 	.word	0x080015ad
 80015a8:	080015c5 	.word	0x080015c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
      break;
 80015b0:	e030      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d025      	beq.n	800160a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015c2:	e022      	b.n	800160a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80015cc:	d11f      	bne.n	800160e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015d2:	e01c      	b.n	800160e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d903      	bls.n	80015e2 <DMA_CheckFifoParam+0xb6>
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d003      	beq.n	80015e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015e0:	e018      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	73fb      	strb	r3, [r7, #15]
      break;
 80015e6:	e015      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00e      	beq.n	8001612 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
      break;
 80015f8:	e00b      	b.n	8001612 <DMA_CheckFifoParam+0xe6>
      break;
 80015fa:	bf00      	nop
 80015fc:	e00a      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      break;
 80015fe:	bf00      	nop
 8001600:	e008      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      break;
 8001602:	bf00      	nop
 8001604:	e006      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      break;
 8001606:	bf00      	nop
 8001608:	e004      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      break;
 800160a:	bf00      	nop
 800160c:	e002      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      break;   
 800160e:	bf00      	nop
 8001610:	e000      	b.n	8001614 <DMA_CheckFifoParam+0xe8>
      break;
 8001612:	bf00      	nop
    }
  } 
  
  return status; 
 8001614:	7bfb      	ldrb	r3, [r7, #15]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	@ 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	e159      	b.n	80018f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 8148 	bne.w	80018ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b01      	cmp	r3, #1
 8001668:	d005      	beq.n	8001676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001672:	2b02      	cmp	r3, #2
 8001674:	d130      	bne.n	80016d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 0201 	and.w	r2, r3, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d017      	beq.n	8001714 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d123      	bne.n	8001768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	08da      	lsrs	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3208      	adds	r2, #8
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	220f      	movs	r2, #15
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	08da      	lsrs	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3208      	adds	r2, #8
 8001762:	69b9      	ldr	r1, [r7, #24]
 8001764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0203 	and.w	r2, r3, #3
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80a2 	beq.w	80018ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b57      	ldr	r3, [pc, #348]	@ (800190c <HAL_GPIO_Init+0x2e8>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b2:	4a56      	ldr	r2, [pc, #344]	@ (800190c <HAL_GPIO_Init+0x2e8>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ba:	4b54      	ldr	r3, [pc, #336]	@ (800190c <HAL_GPIO_Init+0x2e8>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c6:	4a52      	ldr	r2, [pc, #328]	@ (8001910 <HAL_GPIO_Init+0x2ec>)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a49      	ldr	r2, [pc, #292]	@ (8001914 <HAL_GPIO_Init+0x2f0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d019      	beq.n	8001826 <HAL_GPIO_Init+0x202>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a48      	ldr	r2, [pc, #288]	@ (8001918 <HAL_GPIO_Init+0x2f4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_GPIO_Init+0x1fe>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a47      	ldr	r2, [pc, #284]	@ (800191c <HAL_GPIO_Init+0x2f8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d00d      	beq.n	800181e <HAL_GPIO_Init+0x1fa>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a46      	ldr	r2, [pc, #280]	@ (8001920 <HAL_GPIO_Init+0x2fc>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d007      	beq.n	800181a <HAL_GPIO_Init+0x1f6>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a45      	ldr	r2, [pc, #276]	@ (8001924 <HAL_GPIO_Init+0x300>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d101      	bne.n	8001816 <HAL_GPIO_Init+0x1f2>
 8001812:	2304      	movs	r3, #4
 8001814:	e008      	b.n	8001828 <HAL_GPIO_Init+0x204>
 8001816:	2307      	movs	r3, #7
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x204>
 800181a:	2303      	movs	r3, #3
 800181c:	e004      	b.n	8001828 <HAL_GPIO_Init+0x204>
 800181e:	2302      	movs	r3, #2
 8001820:	e002      	b.n	8001828 <HAL_GPIO_Init+0x204>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x204>
 8001826:	2300      	movs	r3, #0
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f002 0203 	and.w	r2, r2, #3
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	4093      	lsls	r3, r2
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001838:	4935      	ldr	r1, [pc, #212]	@ (8001910 <HAL_GPIO_Init+0x2ec>)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001846:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <HAL_GPIO_Init+0x304>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800186a:	4a2f      	ldr	r2, [pc, #188]	@ (8001928 <HAL_GPIO_Init+0x304>)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001870:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <HAL_GPIO_Init+0x304>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001894:	4a24      	ldr	r2, [pc, #144]	@ (8001928 <HAL_GPIO_Init+0x304>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800189a:	4b23      	ldr	r3, [pc, #140]	@ (8001928 <HAL_GPIO_Init+0x304>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018be:	4a1a      	ldr	r2, [pc, #104]	@ (8001928 <HAL_GPIO_Init+0x304>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c4:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <HAL_GPIO_Init+0x304>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001928 <HAL_GPIO_Init+0x304>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	f67f aea2 	bls.w	8001640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3724      	adds	r7, #36	@ 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40013800 	.word	0x40013800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020400 	.word	0x40020400
 800191c:	40020800 	.word	0x40020800
 8001920:	40020c00 	.word	0x40020c00
 8001924:	40021000 	.word	0x40021000
 8001928:	40013c00 	.word	0x40013c00

0800192c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	807b      	strh	r3, [r7, #2]
 8001938:	4613      	mov	r3, r2
 800193a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800193c:	787b      	ldrb	r3, [r7, #1]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001942:	887a      	ldrh	r2, [r7, #2]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001948:	e003      	b.n	8001952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800194a:	887b      	ldrh	r3, [r7, #2]
 800194c:	041a      	lsls	r2, r3, #16
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	619a      	str	r2, [r3, #24]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e267      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d075      	beq.n	8001a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800197e:	4b88      	ldr	r3, [pc, #544]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b04      	cmp	r3, #4
 8001988:	d00c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800198a:	4b85      	ldr	r3, [pc, #532]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001992:	2b08      	cmp	r3, #8
 8001994:	d112      	bne.n	80019bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001996:	4b82      	ldr	r3, [pc, #520]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800199e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019a2:	d10b      	bne.n	80019bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d05b      	beq.n	8001a68 <HAL_RCC_OscConfig+0x108>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d157      	bne.n	8001a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e242      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019c4:	d106      	bne.n	80019d4 <HAL_RCC_OscConfig+0x74>
 80019c6:	4b76      	ldr	r3, [pc, #472]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a75      	ldr	r2, [pc, #468]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e01d      	b.n	8001a10 <HAL_RCC_OscConfig+0xb0>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x98>
 80019de:	4b70      	ldr	r3, [pc, #448]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a6f      	ldr	r2, [pc, #444]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b6d      	ldr	r3, [pc, #436]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a6c      	ldr	r2, [pc, #432]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_OscConfig+0xb0>
 80019f8:	4b69      	ldr	r3, [pc, #420]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a68      	ldr	r2, [pc, #416]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b66      	ldr	r3, [pc, #408]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a65      	ldr	r2, [pc, #404]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d013      	beq.n	8001a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff f8e4 	bl	8000be4 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff f8e0 	bl	8000be4 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	@ 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e207      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0xc0>
 8001a3e:	e014      	b.n	8001a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff f8d0 	bl	8000be4 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff f8cc 	bl	8000be4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	@ 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e1f3      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	4b51      	ldr	r3, [pc, #324]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0xe8>
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d063      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a76:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00b      	beq.n	8001a9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a82:	4b47      	ldr	r3, [pc, #284]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d11c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8e:	4b44      	ldr	r3, [pc, #272]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d116      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9a:	4b41      	ldr	r3, [pc, #260]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d005      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x152>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e1c7      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4937      	ldr	r1, [pc, #220]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	e03a      	b.n	8001b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d020      	beq.n	8001b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b34      	ldr	r3, [pc, #208]	@ (8001ba4 <HAL_RCC_OscConfig+0x244>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f885 	bl	8000be4 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ade:	f7ff f881 	bl	8000be4 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e1a8      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af0:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afc:	4b28      	ldr	r3, [pc, #160]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4925      	ldr	r1, [pc, #148]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	600b      	str	r3, [r1, #0]
 8001b10:	e015      	b.n	8001b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b12:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <HAL_RCC_OscConfig+0x244>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff f864 	bl	8000be4 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b20:	f7ff f860 	bl	8000be4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e187      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b32:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d036      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d016      	beq.n	8001b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <HAL_RCC_OscConfig+0x248>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b58:	f7ff f844 	bl	8000be4 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b60:	f7ff f840 	bl	8000be4 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e167      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x200>
 8001b7e:	e01b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b80:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <HAL_RCC_OscConfig+0x248>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b86:	f7ff f82d 	bl	8000be4 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	e00e      	b.n	8001bac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8e:	f7ff f829 	bl	8000be4 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d907      	bls.n	8001bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e150      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	42470000 	.word	0x42470000
 8001ba8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	4b88      	ldr	r3, [pc, #544]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1ea      	bne.n	8001b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8097 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bca:	4b81      	ldr	r3, [pc, #516]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	4b7d      	ldr	r3, [pc, #500]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	4a7c      	ldr	r2, [pc, #496]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be6:	4b7a      	ldr	r3, [pc, #488]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf6:	4b77      	ldr	r3, [pc, #476]	@ (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d118      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c02:	4b74      	ldr	r3, [pc, #464]	@ (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a73      	ldr	r2, [pc, #460]	@ (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0e:	f7fe ffe9 	bl	8000be4 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c16:	f7fe ffe5 	bl	8000be4 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e10c      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c28:	4b6a      	ldr	r3, [pc, #424]	@ (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x2ea>
 8001c3c:	4b64      	ldr	r3, [pc, #400]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c40:	4a63      	ldr	r2, [pc, #396]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c48:	e01c      	b.n	8001c84 <HAL_RCC_OscConfig+0x324>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x30c>
 8001c52:	4b5f      	ldr	r3, [pc, #380]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c56:	4a5e      	ldr	r2, [pc, #376]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c62:	4a5b      	ldr	r2, [pc, #364]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c6a:	e00b      	b.n	8001c84 <HAL_RCC_OscConfig+0x324>
 8001c6c:	4b58      	ldr	r3, [pc, #352]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c70:	4a57      	ldr	r2, [pc, #348]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c78:	4b55      	ldr	r3, [pc, #340]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7c:	4a54      	ldr	r2, [pc, #336]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c7e:	f023 0304 	bic.w	r3, r3, #4
 8001c82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d015      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8c:	f7fe ffaa 	bl	8000be4 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c94:	f7fe ffa6 	bl	8000be4 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e0cb      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001caa:	4b49      	ldr	r3, [pc, #292]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0ee      	beq.n	8001c94 <HAL_RCC_OscConfig+0x334>
 8001cb6:	e014      	b.n	8001ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7fe ff94 	bl	8000be4 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc0:	f7fe ff90 	bl	8000be4 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e0b5      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ee      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce8:	4b39      	ldr	r3, [pc, #228]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	4a38      	ldr	r2, [pc, #224]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a1 	beq.w	8001e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cfe:	4b34      	ldr	r3, [pc, #208]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d05c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d141      	bne.n	8001d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b31      	ldr	r3, [pc, #196]	@ (8001dd8 <HAL_RCC_OscConfig+0x478>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7fe ff64 	bl	8000be4 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d20:	f7fe ff60 	bl	8000be4 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e087      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d32:	4b27      	ldr	r3, [pc, #156]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69da      	ldr	r2, [r3, #28]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4c:	019b      	lsls	r3, r3, #6
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	3b01      	subs	r3, #1
 8001d58:	041b      	lsls	r3, r3, #16
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	491b      	ldr	r1, [pc, #108]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d68:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <HAL_RCC_OscConfig+0x478>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7fe ff39 	bl	8000be4 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d76:	f7fe ff35 	bl	8000be4 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e05c      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d88:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x416>
 8001d94:	e054      	b.n	8001e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <HAL_RCC_OscConfig+0x478>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7fe ff22 	bl	8000be4 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7fe ff1e 	bl	8000be4 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e045      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x444>
 8001dc2:	e03d      	b.n	8001e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e038      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <HAL_RCC_OscConfig+0x4ec>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d028      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d121      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d11a      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d111      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	3b01      	subs	r3, #1
 8001e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800

08001e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0cc      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e64:	4b68      	ldr	r3, [pc, #416]	@ (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d90c      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b65      	ldr	r3, [pc, #404]	@ (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b63      	ldr	r3, [pc, #396]	@ (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0b8      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d020      	beq.n	8001eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea4:	4b59      	ldr	r3, [pc, #356]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4a58      	ldr	r2, [pc, #352]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001eae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ebc:	4b53      	ldr	r3, [pc, #332]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec8:	4b50      	ldr	r3, [pc, #320]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	494d      	ldr	r1, [pc, #308]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d044      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b47      	ldr	r3, [pc, #284]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d119      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e07f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d109      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e06f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e067      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2e:	4b37      	ldr	r3, [pc, #220]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f023 0203 	bic.w	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4934      	ldr	r1, [pc, #208]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f40:	f7fe fe50 	bl	8000be4 <HAL_GetTick>
 8001f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	e00a      	b.n	8001f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f48:	f7fe fe4c 	bl	8000be4 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e04f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 020c 	and.w	r2, r3, #12
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d1eb      	bne.n	8001f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f70:	4b25      	ldr	r3, [pc, #148]	@ (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d20c      	bcs.n	8001f98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b22      	ldr	r3, [pc, #136]	@ (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b20      	ldr	r3, [pc, #128]	@ (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e032      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa4:	4b19      	ldr	r3, [pc, #100]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4916      	ldr	r1, [pc, #88]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc2:	4b12      	ldr	r3, [pc, #72]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	490e      	ldr	r1, [pc, #56]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fd6:	f000 f821 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	490a      	ldr	r1, [pc, #40]	@ (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	5ccb      	ldrb	r3, [r1, r3]
 8001fea:	fa22 f303 	lsr.w	r3, r2, r3
 8001fee:	4a09      	ldr	r2, [pc, #36]	@ (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fdb0 	bl	8000b5c <HAL_InitTick>

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023c00 	.word	0x40023c00
 800200c:	40023800 	.word	0x40023800
 8002010:	08003c3c 	.word	0x08003c3c
 8002014:	20000010 	.word	0x20000010
 8002018:	20000014 	.word	0x20000014

0800201c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800201c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002020:	b094      	sub	sp, #80	@ 0x50
 8002022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002034:	4b79      	ldr	r3, [pc, #484]	@ (800221c <HAL_RCC_GetSysClockFreq+0x200>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d00d      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x40>
 8002040:	2b08      	cmp	r3, #8
 8002042:	f200 80e1 	bhi.w	8002208 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x34>
 800204a:	2b04      	cmp	r3, #4
 800204c:	d003      	beq.n	8002056 <HAL_RCC_GetSysClockFreq+0x3a>
 800204e:	e0db      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002050:	4b73      	ldr	r3, [pc, #460]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x204>)
 8002052:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002054:	e0db      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002056:	4b73      	ldr	r3, [pc, #460]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x208>)
 8002058:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800205a:	e0d8      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800205c:	4b6f      	ldr	r3, [pc, #444]	@ (800221c <HAL_RCC_GetSysClockFreq+0x200>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002064:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002066:	4b6d      	ldr	r3, [pc, #436]	@ (800221c <HAL_RCC_GetSysClockFreq+0x200>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d063      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002072:	4b6a      	ldr	r3, [pc, #424]	@ (800221c <HAL_RCC_GetSysClockFreq+0x200>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	2200      	movs	r2, #0
 800207a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800207c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800207e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002084:	633b      	str	r3, [r7, #48]	@ 0x30
 8002086:	2300      	movs	r3, #0
 8002088:	637b      	str	r3, [r7, #52]	@ 0x34
 800208a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800208e:	4622      	mov	r2, r4
 8002090:	462b      	mov	r3, r5
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	f04f 0100 	mov.w	r1, #0
 800209a:	0159      	lsls	r1, r3, #5
 800209c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a0:	0150      	lsls	r0, r2, #5
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4621      	mov	r1, r4
 80020a8:	1a51      	subs	r1, r2, r1
 80020aa:	6139      	str	r1, [r7, #16]
 80020ac:	4629      	mov	r1, r5
 80020ae:	eb63 0301 	sbc.w	r3, r3, r1
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020c0:	4659      	mov	r1, fp
 80020c2:	018b      	lsls	r3, r1, #6
 80020c4:	4651      	mov	r1, sl
 80020c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ca:	4651      	mov	r1, sl
 80020cc:	018a      	lsls	r2, r1, #6
 80020ce:	4651      	mov	r1, sl
 80020d0:	ebb2 0801 	subs.w	r8, r2, r1
 80020d4:	4659      	mov	r1, fp
 80020d6:	eb63 0901 	sbc.w	r9, r3, r1
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020ee:	4690      	mov	r8, r2
 80020f0:	4699      	mov	r9, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	eb18 0303 	adds.w	r3, r8, r3
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	462b      	mov	r3, r5
 80020fc:	eb49 0303 	adc.w	r3, r9, r3
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800210e:	4629      	mov	r1, r5
 8002110:	024b      	lsls	r3, r1, #9
 8002112:	4621      	mov	r1, r4
 8002114:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002118:	4621      	mov	r1, r4
 800211a:	024a      	lsls	r2, r1, #9
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002122:	2200      	movs	r2, #0
 8002124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002126:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800212c:	f7fe f85a 	bl	80001e4 <__aeabi_uldivmod>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4613      	mov	r3, r2
 8002136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002138:	e058      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800213a:	4b38      	ldr	r3, [pc, #224]	@ (800221c <HAL_RCC_GetSysClockFreq+0x200>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	099b      	lsrs	r3, r3, #6
 8002140:	2200      	movs	r2, #0
 8002142:	4618      	mov	r0, r3
 8002144:	4611      	mov	r1, r2
 8002146:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800214a:	623b      	str	r3, [r7, #32]
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002150:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002154:	4642      	mov	r2, r8
 8002156:	464b      	mov	r3, r9
 8002158:	f04f 0000 	mov.w	r0, #0
 800215c:	f04f 0100 	mov.w	r1, #0
 8002160:	0159      	lsls	r1, r3, #5
 8002162:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002166:	0150      	lsls	r0, r2, #5
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4641      	mov	r1, r8
 800216e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002172:	4649      	mov	r1, r9
 8002174:	eb63 0b01 	sbc.w	fp, r3, r1
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002184:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002188:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800218c:	ebb2 040a 	subs.w	r4, r2, sl
 8002190:	eb63 050b 	sbc.w	r5, r3, fp
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	00eb      	lsls	r3, r5, #3
 800219e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021a2:	00e2      	lsls	r2, r4, #3
 80021a4:	4614      	mov	r4, r2
 80021a6:	461d      	mov	r5, r3
 80021a8:	4643      	mov	r3, r8
 80021aa:	18e3      	adds	r3, r4, r3
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	464b      	mov	r3, r9
 80021b0:	eb45 0303 	adc.w	r3, r5, r3
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021c2:	4629      	mov	r1, r5
 80021c4:	028b      	lsls	r3, r1, #10
 80021c6:	4621      	mov	r1, r4
 80021c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021cc:	4621      	mov	r1, r4
 80021ce:	028a      	lsls	r2, r1, #10
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021d6:	2200      	movs	r2, #0
 80021d8:	61bb      	str	r3, [r7, #24]
 80021da:	61fa      	str	r2, [r7, #28]
 80021dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021e0:	f7fe f800 	bl	80001e4 <__aeabi_uldivmod>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4613      	mov	r3, r2
 80021ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <HAL_RCC_GetSysClockFreq+0x200>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	3301      	adds	r3, #1
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80021fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002200:	fbb2 f3f3 	udiv	r3, r2, r3
 8002204:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002206:	e002      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002208:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x204>)
 800220a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800220c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002210:	4618      	mov	r0, r3
 8002212:	3750      	adds	r7, #80	@ 0x50
 8002214:	46bd      	mov	sp, r7
 8002216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	00f42400 	.word	0x00f42400
 8002224:	007a1200 	.word	0x007a1200

08002228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <HAL_RCC_GetHCLKFreq+0x14>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000010 	.word	0x20000010

08002240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002244:	f7ff fff0 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	0a9b      	lsrs	r3, r3, #10
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	4903      	ldr	r1, [pc, #12]	@ (8002264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002256:	5ccb      	ldrb	r3, [r1, r3]
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40023800 	.word	0x40023800
 8002264:	08003c4c 	.word	0x08003c4c

08002268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800226c:	f7ff ffdc 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	0b5b      	lsrs	r3, r3, #13
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	4903      	ldr	r1, [pc, #12]	@ (800228c <HAL_RCC_GetPCLK2Freq+0x24>)
 800227e:	5ccb      	ldrb	r3, [r1, r3]
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	08003c4c 	.word	0x08003c4c

08002290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e041      	b.n	8002326 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe fafc 	bl	80008b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	4610      	mov	r0, r2
 80022d0:	f000 fa70 	bl	80027b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b01      	cmp	r3, #1
 8002342:	d001      	beq.n	8002348 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e044      	b.n	80023d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1e      	ldr	r2, [pc, #120]	@ (80023e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d018      	beq.n	800239c <HAL_TIM_Base_Start_IT+0x6c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002372:	d013      	beq.n	800239c <HAL_TIM_Base_Start_IT+0x6c>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1a      	ldr	r2, [pc, #104]	@ (80023e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00e      	beq.n	800239c <HAL_TIM_Base_Start_IT+0x6c>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a19      	ldr	r2, [pc, #100]	@ (80023e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d009      	beq.n	800239c <HAL_TIM_Base_Start_IT+0x6c>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a17      	ldr	r2, [pc, #92]	@ (80023ec <HAL_TIM_Base_Start_IT+0xbc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d004      	beq.n	800239c <HAL_TIM_Base_Start_IT+0x6c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a16      	ldr	r2, [pc, #88]	@ (80023f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d111      	bne.n	80023c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d010      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023be:	e007      	b.n	80023d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40010000 	.word	0x40010000
 80023e4:	40000400 	.word	0x40000400
 80023e8:	40000800 	.word	0x40000800
 80023ec:	40000c00 	.word	0x40000c00
 80023f0:	40014000 	.word	0x40014000

080023f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d020      	beq.n	8002458 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01b      	beq.n	8002458 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0202 	mvn.w	r2, #2
 8002428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f999 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
 8002444:	e005      	b.n	8002452 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f98b 	bl	8002762 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f99c 	bl	800278a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d020      	beq.n	80024a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01b      	beq.n	80024a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0204 	mvn.w	r2, #4
 8002474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2202      	movs	r2, #2
 800247a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f973 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f965 	bl	8002762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f976 	bl	800278a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d020      	beq.n	80024f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01b      	beq.n	80024f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0208 	mvn.w	r2, #8
 80024c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2204      	movs	r2, #4
 80024c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f94d 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f93f 	bl	8002762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f950 	bl	800278a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d020      	beq.n	800253c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01b      	beq.n	800253c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0210 	mvn.w	r2, #16
 800250c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2208      	movs	r2, #8
 8002512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f927 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
 8002528:	e005      	b.n	8002536 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f919 	bl	8002762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f92a 	bl	800278a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00c      	beq.n	8002560 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0201 	mvn.w	r2, #1
 8002558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fd ffd8 	bl	8000510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00c      	beq.n	8002584 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800257c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fab6 	bl	8002af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00c      	beq.n	80025a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f8fb 	bl	800279e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00c      	beq.n	80025cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0220 	mvn.w	r2, #32
 80025c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fa88 	bl	8002adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_TIM_ConfigClockSource+0x1c>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e0b4      	b.n	800275a <HAL_TIM_ConfigClockSource+0x186>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800260e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002616:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002628:	d03e      	beq.n	80026a8 <HAL_TIM_ConfigClockSource+0xd4>
 800262a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800262e:	f200 8087 	bhi.w	8002740 <HAL_TIM_ConfigClockSource+0x16c>
 8002632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002636:	f000 8086 	beq.w	8002746 <HAL_TIM_ConfigClockSource+0x172>
 800263a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800263e:	d87f      	bhi.n	8002740 <HAL_TIM_ConfigClockSource+0x16c>
 8002640:	2b70      	cmp	r3, #112	@ 0x70
 8002642:	d01a      	beq.n	800267a <HAL_TIM_ConfigClockSource+0xa6>
 8002644:	2b70      	cmp	r3, #112	@ 0x70
 8002646:	d87b      	bhi.n	8002740 <HAL_TIM_ConfigClockSource+0x16c>
 8002648:	2b60      	cmp	r3, #96	@ 0x60
 800264a:	d050      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0x11a>
 800264c:	2b60      	cmp	r3, #96	@ 0x60
 800264e:	d877      	bhi.n	8002740 <HAL_TIM_ConfigClockSource+0x16c>
 8002650:	2b50      	cmp	r3, #80	@ 0x50
 8002652:	d03c      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0xfa>
 8002654:	2b50      	cmp	r3, #80	@ 0x50
 8002656:	d873      	bhi.n	8002740 <HAL_TIM_ConfigClockSource+0x16c>
 8002658:	2b40      	cmp	r3, #64	@ 0x40
 800265a:	d058      	beq.n	800270e <HAL_TIM_ConfigClockSource+0x13a>
 800265c:	2b40      	cmp	r3, #64	@ 0x40
 800265e:	d86f      	bhi.n	8002740 <HAL_TIM_ConfigClockSource+0x16c>
 8002660:	2b30      	cmp	r3, #48	@ 0x30
 8002662:	d064      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x15a>
 8002664:	2b30      	cmp	r3, #48	@ 0x30
 8002666:	d86b      	bhi.n	8002740 <HAL_TIM_ConfigClockSource+0x16c>
 8002668:	2b20      	cmp	r3, #32
 800266a:	d060      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x15a>
 800266c:	2b20      	cmp	r3, #32
 800266e:	d867      	bhi.n	8002740 <HAL_TIM_ConfigClockSource+0x16c>
 8002670:	2b00      	cmp	r3, #0
 8002672:	d05c      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x15a>
 8002674:	2b10      	cmp	r3, #16
 8002676:	d05a      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x15a>
 8002678:	e062      	b.n	8002740 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800268a:	f000 f999 	bl	80029c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800269c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	609a      	str	r2, [r3, #8]
      break;
 80026a6:	e04f      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026b8:	f000 f982 	bl	80029c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026ca:	609a      	str	r2, [r3, #8]
      break;
 80026cc:	e03c      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026da:	461a      	mov	r2, r3
 80026dc:	f000 f8f6 	bl	80028cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2150      	movs	r1, #80	@ 0x50
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f94f 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 80026ec:	e02c      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026fa:	461a      	mov	r2, r3
 80026fc:	f000 f915 	bl	800292a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2160      	movs	r1, #96	@ 0x60
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f93f 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 800270c:	e01c      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800271a:	461a      	mov	r2, r3
 800271c:	f000 f8d6 	bl	80028cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2140      	movs	r1, #64	@ 0x40
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f92f 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 800272c:	e00c      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4619      	mov	r1, r3
 8002738:	4610      	mov	r0, r2
 800273a:	f000 f926 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 800273e:	e003      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
      break;
 8002744:	e000      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002746:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a3a      	ldr	r2, [pc, #232]	@ (80028b0 <TIM_Base_SetConfig+0xfc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00f      	beq.n	80027ec <TIM_Base_SetConfig+0x38>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027d2:	d00b      	beq.n	80027ec <TIM_Base_SetConfig+0x38>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a37      	ldr	r2, [pc, #220]	@ (80028b4 <TIM_Base_SetConfig+0x100>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d007      	beq.n	80027ec <TIM_Base_SetConfig+0x38>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a36      	ldr	r2, [pc, #216]	@ (80028b8 <TIM_Base_SetConfig+0x104>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d003      	beq.n	80027ec <TIM_Base_SetConfig+0x38>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a35      	ldr	r2, [pc, #212]	@ (80028bc <TIM_Base_SetConfig+0x108>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d108      	bne.n	80027fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a2b      	ldr	r2, [pc, #172]	@ (80028b0 <TIM_Base_SetConfig+0xfc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01b      	beq.n	800283e <TIM_Base_SetConfig+0x8a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800280c:	d017      	beq.n	800283e <TIM_Base_SetConfig+0x8a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a28      	ldr	r2, [pc, #160]	@ (80028b4 <TIM_Base_SetConfig+0x100>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d013      	beq.n	800283e <TIM_Base_SetConfig+0x8a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a27      	ldr	r2, [pc, #156]	@ (80028b8 <TIM_Base_SetConfig+0x104>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00f      	beq.n	800283e <TIM_Base_SetConfig+0x8a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a26      	ldr	r2, [pc, #152]	@ (80028bc <TIM_Base_SetConfig+0x108>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00b      	beq.n	800283e <TIM_Base_SetConfig+0x8a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a25      	ldr	r2, [pc, #148]	@ (80028c0 <TIM_Base_SetConfig+0x10c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d007      	beq.n	800283e <TIM_Base_SetConfig+0x8a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a24      	ldr	r2, [pc, #144]	@ (80028c4 <TIM_Base_SetConfig+0x110>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d003      	beq.n	800283e <TIM_Base_SetConfig+0x8a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a23      	ldr	r2, [pc, #140]	@ (80028c8 <TIM_Base_SetConfig+0x114>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d108      	bne.n	8002850 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a0e      	ldr	r2, [pc, #56]	@ (80028b0 <TIM_Base_SetConfig+0xfc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d103      	bne.n	8002884 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d105      	bne.n	80028a2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f023 0201 	bic.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	611a      	str	r2, [r3, #16]
  }
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40010000 	.word	0x40010000
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40000800 	.word	0x40000800
 80028bc:	40000c00 	.word	0x40000c00
 80028c0:	40014000 	.word	0x40014000
 80028c4:	40014400 	.word	0x40014400
 80028c8:	40014800 	.word	0x40014800

080028cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f023 0201 	bic.w	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f023 030a 	bic.w	r3, r3, #10
 8002908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	621a      	str	r2, [r3, #32]
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800292a:	b480      	push	{r7}
 800292c:	b087      	sub	sp, #28
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f023 0210 	bic.w	r2, r3, #16
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	031b      	lsls	r3, r3, #12
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002966:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	621a      	str	r2, [r3, #32]
}
 800297e:	bf00      	nop
 8002980:	371c      	adds	r7, #28
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f043 0307 	orr.w	r3, r3, #7
 80029ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	609a      	str	r2, [r3, #8]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	021a      	lsls	r2, r3, #8
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	609a      	str	r2, [r3, #8]
}
 80029f4:	bf00      	nop
 80029f6:	371c      	adds	r7, #28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e050      	b.n	8002aba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1c      	ldr	r2, [pc, #112]	@ (8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d018      	beq.n	8002a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a64:	d013      	beq.n	8002a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a18      	ldr	r2, [pc, #96]	@ (8002acc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00e      	beq.n	8002a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a16      	ldr	r2, [pc, #88]	@ (8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d009      	beq.n	8002a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a15      	ldr	r2, [pc, #84]	@ (8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d004      	beq.n	8002a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a13      	ldr	r2, [pc, #76]	@ (8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800
 8002ad4:	40000c00 	.word	0x40000c00
 8002ad8:	40014000 	.word	0x40014000

08002adc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e042      	b.n	8002b9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fd fee8 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2224      	movs	r2, #36	@ 0x24
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fdcb 	bl	80036e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08c      	sub	sp, #48	@ 0x30
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d156      	bne.n	8002c6c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <HAL_UART_Transmit_DMA+0x26>
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e04f      	b.n	8002c6e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	88fa      	ldrh	r2, [r7, #6]
 8002bd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	88fa      	ldrh	r2, [r7, #6]
 8002bde:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2221      	movs	r2, #33	@ 0x21
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf2:	4a21      	ldr	r2, [pc, #132]	@ (8002c78 <HAL_UART_Transmit_DMA+0xd4>)
 8002bf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfa:	4a20      	ldr	r2, [pc, #128]	@ (8002c7c <HAL_UART_Transmit_DMA+0xd8>)
 8002bfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c02:	4a1f      	ldr	r2, [pc, #124]	@ (8002c80 <HAL_UART_Transmit_DMA+0xdc>)
 8002c04:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002c0e:	f107 0308 	add.w	r3, r7, #8
 8002c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1a:	6819      	ldr	r1, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3304      	adds	r3, #4
 8002c22:	461a      	mov	r2, r3
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	f7fe f9a9 	bl	8000f7c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c32:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3314      	adds	r3, #20
 8002c3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	e853 3f00 	ldrex	r3, [r3]
 8002c42:	617b      	str	r3, [r7, #20]
   return(result);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3314      	adds	r3, #20
 8002c52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c54:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c58:	6a39      	ldr	r1, [r7, #32]
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5c:	e841 2300 	strex	r3, r2, [r1]
 8002c60:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1e5      	bne.n	8002c34 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e000      	b.n	8002c6e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002c6c:	2302      	movs	r3, #2
  }
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3730      	adds	r7, #48	@ 0x30
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	08003211 	.word	0x08003211
 8002c7c:	080032ab 	.word	0x080032ab
 8002c80:	080032c7 	.word	0x080032c7

08002c84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b0ba      	sub	sp, #232	@ 0xe8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10f      	bne.n	8002cea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_UART_IRQHandler+0x66>
 8002cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fc40 	bl	8003568 <UART_Receive_IT>
      return;
 8002ce8:	e25b      	b.n	80031a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80de 	beq.w	8002eb0 <HAL_UART_IRQHandler+0x22c>
 8002cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d106      	bne.n	8002d0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80d1 	beq.w	8002eb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_UART_IRQHandler+0xae>
 8002d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_UART_IRQHandler+0xd2>
 8002d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	f043 0202 	orr.w	r2, r3, #2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <HAL_UART_IRQHandler+0xf6>
 8002d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	f043 0204 	orr.w	r2, r3, #4
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d011      	beq.n	8002daa <HAL_UART_IRQHandler+0x126>
 8002d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d105      	bne.n	8002d9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da2:	f043 0208 	orr.w	r2, r3, #8
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 81f2 	beq.w	8003198 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x14e>
 8002dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fbcb 	bl	8003568 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ddc:	2b40      	cmp	r3, #64	@ 0x40
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d103      	bne.n	8002dfe <HAL_UART_IRQHandler+0x17a>
 8002df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d04f      	beq.n	8002e9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fad3 	bl	80033aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e0e:	2b40      	cmp	r3, #64	@ 0x40
 8002e10:	d141      	bne.n	8002e96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3314      	adds	r3, #20
 8002e18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3314      	adds	r3, #20
 8002e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e4e:	e841 2300 	strex	r3, r2, [r1]
 8002e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1d9      	bne.n	8002e12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d013      	beq.n	8002e8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e6a:	4a7e      	ldr	r2, [pc, #504]	@ (8003064 <HAL_UART_IRQHandler+0x3e0>)
 8002e6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe f94a 	bl	800110c <HAL_DMA_Abort_IT>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8c:	e00e      	b.n	8002eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f9a8 	bl	80031e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e94:	e00a      	b.n	8002eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f9a4 	bl	80031e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e9c:	e006      	b.n	8002eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f9a0 	bl	80031e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002eaa:	e175      	b.n	8003198 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eac:	bf00      	nop
    return;
 8002eae:	e173      	b.n	8003198 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	f040 814f 	bne.w	8003158 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8148 	beq.w	8003158 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8141 	beq.w	8003158 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef6:	2b40      	cmp	r3, #64	@ 0x40
 8002ef8:	f040 80b6 	bne.w	8003068 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8145 	beq.w	800319c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	f080 813e 	bcs.w	800319c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f32:	f000 8088 	beq.w	8003046 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f44:	e853 3f00 	ldrex	r3, [r3]
 8002f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	330c      	adds	r3, #12
 8002f5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f72:	e841 2300 	strex	r3, r2, [r1]
 8002f76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1d9      	bne.n	8002f36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3314      	adds	r3, #20
 8002f88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f8c:	e853 3f00 	ldrex	r3, [r3]
 8002f90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002f92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3314      	adds	r3, #20
 8002fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fa6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002faa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002fb2:	e841 2300 	strex	r3, r2, [r1]
 8002fb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002fb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1e1      	bne.n	8002f82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3314      	adds	r3, #20
 8002fc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fc8:	e853 3f00 	ldrex	r3, [r3]
 8002fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3314      	adds	r3, #20
 8002fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002fe2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002fe8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002fea:	e841 2300 	strex	r3, r2, [r1]
 8002fee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1e3      	bne.n	8002fbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	330c      	adds	r3, #12
 800300a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800300e:	e853 3f00 	ldrex	r3, [r3]
 8003012:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003014:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003016:	f023 0310 	bic.w	r3, r3, #16
 800301a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	330c      	adds	r3, #12
 8003024:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003028:	65ba      	str	r2, [r7, #88]	@ 0x58
 800302a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800302e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003030:	e841 2300 	strex	r3, r2, [r1]
 8003034:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e3      	bne.n	8003004 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd fff3 	bl	800102c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003054:	b29b      	uxth	r3, r3
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	b29b      	uxth	r3, r3
 800305a:	4619      	mov	r1, r3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f8cb 	bl	80031f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003062:	e09b      	b.n	800319c <HAL_UART_IRQHandler+0x518>
 8003064:	08003471 	.word	0x08003471
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003070:	b29b      	uxth	r3, r3
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 808e 	beq.w	80031a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8089 	beq.w	80031a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	330c      	adds	r3, #12
 8003094:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003098:	e853 3f00 	ldrex	r3, [r3]
 800309c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800309e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80030b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80030b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030ba:	e841 2300 	strex	r3, r2, [r1]
 80030be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1e3      	bne.n	800308e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3314      	adds	r3, #20
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	623b      	str	r3, [r7, #32]
   return(result);
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3314      	adds	r3, #20
 80030e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80030ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80030ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e3      	bne.n	80030c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	330c      	adds	r3, #12
 8003112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	e853 3f00 	ldrex	r3, [r3]
 800311a:	60fb      	str	r3, [r7, #12]
   return(result);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0310 	bic.w	r3, r3, #16
 8003122:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003130:	61fa      	str	r2, [r7, #28]
 8003132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003134:	69b9      	ldr	r1, [r7, #24]
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	e841 2300 	strex	r3, r2, [r1]
 800313c:	617b      	str	r3, [r7, #20]
   return(result);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e3      	bne.n	800310c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800314a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800314e:	4619      	mov	r1, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f851 	bl	80031f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003156:	e023      	b.n	80031a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800315c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003160:	2b00      	cmp	r3, #0
 8003162:	d009      	beq.n	8003178 <HAL_UART_IRQHandler+0x4f4>
 8003164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f991 	bl	8003498 <UART_Transmit_IT>
    return;
 8003176:	e014      	b.n	80031a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800317c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00e      	beq.n	80031a2 <HAL_UART_IRQHandler+0x51e>
 8003184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f9d1 	bl	8003538 <UART_EndTransmit_IT>
    return;
 8003196:	e004      	b.n	80031a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003198:	bf00      	nop
 800319a:	e002      	b.n	80031a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800319c:	bf00      	nop
 800319e:	e000      	b.n	80031a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80031a0:	bf00      	nop
  }
}
 80031a2:	37e8      	adds	r7, #232	@ 0xe8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b090      	sub	sp, #64	@ 0x40
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d137      	bne.n	800329c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800322c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800322e:	2200      	movs	r2, #0
 8003230:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3314      	adds	r3, #20
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	623b      	str	r3, [r7, #32]
   return(result);
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003248:	63bb      	str	r3, [r7, #56]	@ 0x38
 800324a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3314      	adds	r3, #20
 8003250:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003252:	633a      	str	r2, [r7, #48]	@ 0x30
 8003254:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e5      	bne.n	8003232 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	330c      	adds	r3, #12
 800326c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	60fb      	str	r3, [r7, #12]
   return(result);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800327c:	637b      	str	r3, [r7, #52]	@ 0x34
 800327e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	330c      	adds	r3, #12
 8003284:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003286:	61fa      	str	r2, [r7, #28]
 8003288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328a:	69b9      	ldr	r1, [r7, #24]
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	617b      	str	r3, [r7, #20]
   return(result);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e5      	bne.n	8003266 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800329a:	e002      	b.n	80032a2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800329c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800329e:	f7ff ff83 	bl	80031a8 <HAL_UART_TxCpltCallback>
}
 80032a2:	bf00      	nop
 80032a4:	3740      	adds	r7, #64	@ 0x40
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f7ff ff7f 	bl	80031bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e2:	2b80      	cmp	r3, #128	@ 0x80
 80032e4:	bf0c      	ite	eq
 80032e6:	2301      	moveq	r3, #1
 80032e8:	2300      	movne	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b21      	cmp	r3, #33	@ 0x21
 80032f8:	d108      	bne.n	800330c <UART_DMAError+0x46>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003306:	68b8      	ldr	r0, [r7, #8]
 8003308:	f000 f827 	bl	800335a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003316:	2b40      	cmp	r3, #64	@ 0x40
 8003318:	bf0c      	ite	eq
 800331a:	2301      	moveq	r3, #1
 800331c:	2300      	movne	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b22      	cmp	r3, #34	@ 0x22
 800332c:	d108      	bne.n	8003340 <UART_DMAError+0x7a>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2200      	movs	r2, #0
 8003338:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800333a:	68b8      	ldr	r0, [r7, #8]
 800333c:	f000 f835 	bl	80033aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003344:	f043 0210 	orr.w	r2, r3, #16
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800334c:	68b8      	ldr	r0, [r7, #8]
 800334e:	f7ff ff49 	bl	80031e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800335a:	b480      	push	{r7}
 800335c:	b089      	sub	sp, #36	@ 0x24
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	330c      	adds	r3, #12
 8003368:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	e853 3f00 	ldrex	r3, [r3]
 8003370:	60bb      	str	r3, [r7, #8]
   return(result);
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003378:	61fb      	str	r3, [r7, #28]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	330c      	adds	r3, #12
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	61ba      	str	r2, [r7, #24]
 8003384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003386:	6979      	ldr	r1, [r7, #20]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	e841 2300 	strex	r3, r2, [r1]
 800338e:	613b      	str	r3, [r7, #16]
   return(result);
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1e5      	bne.n	8003362 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800339e:	bf00      	nop
 80033a0:	3724      	adds	r7, #36	@ 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b095      	sub	sp, #84	@ 0x54
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	330c      	adds	r3, #12
 80033b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033bc:	e853 3f00 	ldrex	r3, [r3]
 80033c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	330c      	adds	r3, #12
 80033d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80033d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033da:	e841 2300 	strex	r3, r2, [r1]
 80033de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e5      	bne.n	80033b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3314      	adds	r3, #20
 80033ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3314      	adds	r3, #20
 8003404:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003406:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003408:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800340c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800340e:	e841 2300 	strex	r3, r2, [r1]
 8003412:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1e5      	bne.n	80033e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341e:	2b01      	cmp	r3, #1
 8003420:	d119      	bne.n	8003456 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	330c      	adds	r3, #12
 8003428:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	e853 3f00 	ldrex	r3, [r3]
 8003430:	60bb      	str	r3, [r7, #8]
   return(result);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f023 0310 	bic.w	r3, r3, #16
 8003438:	647b      	str	r3, [r7, #68]	@ 0x44
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	330c      	adds	r3, #12
 8003440:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003442:	61ba      	str	r2, [r7, #24]
 8003444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	6979      	ldr	r1, [r7, #20]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	613b      	str	r3, [r7, #16]
   return(result);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e5      	bne.n	8003422 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003464:	bf00      	nop
 8003466:	3754      	adds	r7, #84	@ 0x54
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff feaa 	bl	80031e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b21      	cmp	r3, #33	@ 0x21
 80034aa:	d13e      	bne.n	800352a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034b4:	d114      	bne.n	80034e0 <UART_Transmit_IT+0x48>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d110      	bne.n	80034e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	1c9a      	adds	r2, r3, #2
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	621a      	str	r2, [r3, #32]
 80034de:	e008      	b.n	80034f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	1c59      	adds	r1, r3, #1
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6211      	str	r1, [r2, #32]
 80034ea:	781a      	ldrb	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4619      	mov	r1, r3
 8003500:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003514:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003524:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	e000      	b.n	800352c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800352a:	2302      	movs	r3, #2
  }
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800354e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fe25 	bl	80031a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08c      	sub	sp, #48	@ 0x30
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b22      	cmp	r3, #34	@ 0x22
 800357a:	f040 80ae 	bne.w	80036da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003586:	d117      	bne.n	80035b8 <UART_Receive_IT+0x50>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d113      	bne.n	80035b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003590:	2300      	movs	r3, #0
 8003592:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003598:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b0:	1c9a      	adds	r2, r3, #2
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80035b6:	e026      	b.n	8003606 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ca:	d007      	beq.n	80035dc <UART_Receive_IT+0x74>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <UART_Receive_IT+0x82>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e6:	701a      	strb	r2, [r3, #0]
 80035e8:	e008      	b.n	80035fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29b      	uxth	r3, r3
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4619      	mov	r1, r3
 8003614:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003616:	2b00      	cmp	r3, #0
 8003618:	d15d      	bne.n	80036d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0220 	bic.w	r2, r2, #32
 8003628:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003638:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695a      	ldr	r2, [r3, #20]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365c:	2b01      	cmp	r3, #1
 800365e:	d135      	bne.n	80036cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	330c      	adds	r3, #12
 800366c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	613b      	str	r3, [r7, #16]
   return(result);
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f023 0310 	bic.w	r3, r3, #16
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	330c      	adds	r3, #12
 8003684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003686:	623a      	str	r2, [r7, #32]
 8003688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	69f9      	ldr	r1, [r7, #28]
 800368c:	6a3a      	ldr	r2, [r7, #32]
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	61bb      	str	r3, [r7, #24]
   return(result);
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e5      	bne.n	8003666 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d10a      	bne.n	80036be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036c2:	4619      	mov	r1, r3
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff fd97 	bl	80031f8 <HAL_UARTEx_RxEventCallback>
 80036ca:	e002      	b.n	80036d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff fd7f 	bl	80031d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e002      	b.n	80036dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e000      	b.n	80036dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80036da:	2302      	movs	r3, #2
  }
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3730      	adds	r7, #48	@ 0x30
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e8:	b0c0      	sub	sp, #256	@ 0x100
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003700:	68d9      	ldr	r1, [r3, #12]
 8003702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	ea40 0301 	orr.w	r3, r0, r1
 800370c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800370e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	431a      	orrs	r2, r3
 800371c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	431a      	orrs	r2, r3
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800373c:	f021 010c 	bic.w	r1, r1, #12
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800374a:	430b      	orrs	r3, r1
 800374c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800375a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375e:	6999      	ldr	r1, [r3, #24]
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	ea40 0301 	orr.w	r3, r0, r1
 800376a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	4b8f      	ldr	r3, [pc, #572]	@ (80039b0 <UART_SetConfig+0x2cc>)
 8003774:	429a      	cmp	r2, r3
 8003776:	d005      	beq.n	8003784 <UART_SetConfig+0xa0>
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4b8d      	ldr	r3, [pc, #564]	@ (80039b4 <UART_SetConfig+0x2d0>)
 8003780:	429a      	cmp	r2, r3
 8003782:	d104      	bne.n	800378e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003784:	f7fe fd70 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 8003788:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800378c:	e003      	b.n	8003796 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800378e:	f7fe fd57 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
 8003792:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037a0:	f040 810c 	bne.w	80039bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037a8:	2200      	movs	r2, #0
 80037aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80037b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80037b6:	4622      	mov	r2, r4
 80037b8:	462b      	mov	r3, r5
 80037ba:	1891      	adds	r1, r2, r2
 80037bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037be:	415b      	adcs	r3, r3
 80037c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037c6:	4621      	mov	r1, r4
 80037c8:	eb12 0801 	adds.w	r8, r2, r1
 80037cc:	4629      	mov	r1, r5
 80037ce:	eb43 0901 	adc.w	r9, r3, r1
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037e6:	4690      	mov	r8, r2
 80037e8:	4699      	mov	r9, r3
 80037ea:	4623      	mov	r3, r4
 80037ec:	eb18 0303 	adds.w	r3, r8, r3
 80037f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037f4:	462b      	mov	r3, r5
 80037f6:	eb49 0303 	adc.w	r3, r9, r3
 80037fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800380a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800380e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003812:	460b      	mov	r3, r1
 8003814:	18db      	adds	r3, r3, r3
 8003816:	653b      	str	r3, [r7, #80]	@ 0x50
 8003818:	4613      	mov	r3, r2
 800381a:	eb42 0303 	adc.w	r3, r2, r3
 800381e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003820:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003824:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003828:	f7fc fcdc 	bl	80001e4 <__aeabi_uldivmod>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4b61      	ldr	r3, [pc, #388]	@ (80039b8 <UART_SetConfig+0x2d4>)
 8003832:	fba3 2302 	umull	r2, r3, r3, r2
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	011c      	lsls	r4, r3, #4
 800383a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800383e:	2200      	movs	r2, #0
 8003840:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003844:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003848:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800384c:	4642      	mov	r2, r8
 800384e:	464b      	mov	r3, r9
 8003850:	1891      	adds	r1, r2, r2
 8003852:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003854:	415b      	adcs	r3, r3
 8003856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003858:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800385c:	4641      	mov	r1, r8
 800385e:	eb12 0a01 	adds.w	sl, r2, r1
 8003862:	4649      	mov	r1, r9
 8003864:	eb43 0b01 	adc.w	fp, r3, r1
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003874:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003878:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800387c:	4692      	mov	sl, r2
 800387e:	469b      	mov	fp, r3
 8003880:	4643      	mov	r3, r8
 8003882:	eb1a 0303 	adds.w	r3, sl, r3
 8003886:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800388a:	464b      	mov	r3, r9
 800388c:	eb4b 0303 	adc.w	r3, fp, r3
 8003890:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038a8:	460b      	mov	r3, r1
 80038aa:	18db      	adds	r3, r3, r3
 80038ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80038ae:	4613      	mov	r3, r2
 80038b0:	eb42 0303 	adc.w	r3, r2, r3
 80038b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80038ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80038be:	f7fc fc91 	bl	80001e4 <__aeabi_uldivmod>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	4b3b      	ldr	r3, [pc, #236]	@ (80039b8 <UART_SetConfig+0x2d4>)
 80038ca:	fba3 2301 	umull	r2, r3, r3, r1
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2264      	movs	r2, #100	@ 0x64
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	1acb      	subs	r3, r1, r3
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80038de:	4b36      	ldr	r3, [pc, #216]	@ (80039b8 <UART_SetConfig+0x2d4>)
 80038e0:	fba3 2302 	umull	r2, r3, r3, r2
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80038ec:	441c      	add	r4, r3
 80038ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80038fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003900:	4642      	mov	r2, r8
 8003902:	464b      	mov	r3, r9
 8003904:	1891      	adds	r1, r2, r2
 8003906:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003908:	415b      	adcs	r3, r3
 800390a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800390c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003910:	4641      	mov	r1, r8
 8003912:	1851      	adds	r1, r2, r1
 8003914:	6339      	str	r1, [r7, #48]	@ 0x30
 8003916:	4649      	mov	r1, r9
 8003918:	414b      	adcs	r3, r1
 800391a:	637b      	str	r3, [r7, #52]	@ 0x34
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003928:	4659      	mov	r1, fp
 800392a:	00cb      	lsls	r3, r1, #3
 800392c:	4651      	mov	r1, sl
 800392e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003932:	4651      	mov	r1, sl
 8003934:	00ca      	lsls	r2, r1, #3
 8003936:	4610      	mov	r0, r2
 8003938:	4619      	mov	r1, r3
 800393a:	4603      	mov	r3, r0
 800393c:	4642      	mov	r2, r8
 800393e:	189b      	adds	r3, r3, r2
 8003940:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003944:	464b      	mov	r3, r9
 8003946:	460a      	mov	r2, r1
 8003948:	eb42 0303 	adc.w	r3, r2, r3
 800394c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800395c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003960:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003964:	460b      	mov	r3, r1
 8003966:	18db      	adds	r3, r3, r3
 8003968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800396a:	4613      	mov	r3, r2
 800396c:	eb42 0303 	adc.w	r3, r2, r3
 8003970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003972:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003976:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800397a:	f7fc fc33 	bl	80001e4 <__aeabi_uldivmod>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4b0d      	ldr	r3, [pc, #52]	@ (80039b8 <UART_SetConfig+0x2d4>)
 8003984:	fba3 1302 	umull	r1, r3, r3, r2
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	2164      	movs	r1, #100	@ 0x64
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	3332      	adds	r3, #50	@ 0x32
 8003996:	4a08      	ldr	r2, [pc, #32]	@ (80039b8 <UART_SetConfig+0x2d4>)
 8003998:	fba2 2303 	umull	r2, r3, r2, r3
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	f003 0207 	and.w	r2, r3, #7
 80039a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4422      	add	r2, r4
 80039aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039ac:	e106      	b.n	8003bbc <UART_SetConfig+0x4d8>
 80039ae:	bf00      	nop
 80039b0:	40011000 	.word	0x40011000
 80039b4:	40011400 	.word	0x40011400
 80039b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80039ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80039ce:	4642      	mov	r2, r8
 80039d0:	464b      	mov	r3, r9
 80039d2:	1891      	adds	r1, r2, r2
 80039d4:	6239      	str	r1, [r7, #32]
 80039d6:	415b      	adcs	r3, r3
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039de:	4641      	mov	r1, r8
 80039e0:	1854      	adds	r4, r2, r1
 80039e2:	4649      	mov	r1, r9
 80039e4:	eb43 0501 	adc.w	r5, r3, r1
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	00eb      	lsls	r3, r5, #3
 80039f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039f6:	00e2      	lsls	r2, r4, #3
 80039f8:	4614      	mov	r4, r2
 80039fa:	461d      	mov	r5, r3
 80039fc:	4643      	mov	r3, r8
 80039fe:	18e3      	adds	r3, r4, r3
 8003a00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a04:	464b      	mov	r3, r9
 8003a06:	eb45 0303 	adc.w	r3, r5, r3
 8003a0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	008b      	lsls	r3, r1, #2
 8003a2e:	4621      	mov	r1, r4
 8003a30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a34:	4621      	mov	r1, r4
 8003a36:	008a      	lsls	r2, r1, #2
 8003a38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a3c:	f7fc fbd2 	bl	80001e4 <__aeabi_uldivmod>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4b60      	ldr	r3, [pc, #384]	@ (8003bc8 <UART_SetConfig+0x4e4>)
 8003a46:	fba3 2302 	umull	r2, r3, r3, r2
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	011c      	lsls	r4, r3, #4
 8003a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a60:	4642      	mov	r2, r8
 8003a62:	464b      	mov	r3, r9
 8003a64:	1891      	adds	r1, r2, r2
 8003a66:	61b9      	str	r1, [r7, #24]
 8003a68:	415b      	adcs	r3, r3
 8003a6a:	61fb      	str	r3, [r7, #28]
 8003a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a70:	4641      	mov	r1, r8
 8003a72:	1851      	adds	r1, r2, r1
 8003a74:	6139      	str	r1, [r7, #16]
 8003a76:	4649      	mov	r1, r9
 8003a78:	414b      	adcs	r3, r1
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a88:	4659      	mov	r1, fp
 8003a8a:	00cb      	lsls	r3, r1, #3
 8003a8c:	4651      	mov	r1, sl
 8003a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a92:	4651      	mov	r1, sl
 8003a94:	00ca      	lsls	r2, r1, #3
 8003a96:	4610      	mov	r0, r2
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	189b      	adds	r3, r3, r2
 8003aa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003aa4:	464b      	mov	r3, r9
 8003aa6:	460a      	mov	r2, r1
 8003aa8:	eb42 0303 	adc.w	r3, r2, r3
 8003aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003aba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ac8:	4649      	mov	r1, r9
 8003aca:	008b      	lsls	r3, r1, #2
 8003acc:	4641      	mov	r1, r8
 8003ace:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ad2:	4641      	mov	r1, r8
 8003ad4:	008a      	lsls	r2, r1, #2
 8003ad6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ada:	f7fc fb83 	bl	80001e4 <__aeabi_uldivmod>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4b38      	ldr	r3, [pc, #224]	@ (8003bc8 <UART_SetConfig+0x4e4>)
 8003ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	2264      	movs	r2, #100	@ 0x64
 8003aee:	fb02 f303 	mul.w	r3, r2, r3
 8003af2:	1acb      	subs	r3, r1, r3
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	3332      	adds	r3, #50	@ 0x32
 8003af8:	4a33      	ldr	r2, [pc, #204]	@ (8003bc8 <UART_SetConfig+0x4e4>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b04:	441c      	add	r4, r3
 8003b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b14:	4642      	mov	r2, r8
 8003b16:	464b      	mov	r3, r9
 8003b18:	1891      	adds	r1, r2, r2
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	415b      	adcs	r3, r3
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b24:	4641      	mov	r1, r8
 8003b26:	1851      	adds	r1, r2, r1
 8003b28:	6039      	str	r1, [r7, #0]
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	414b      	adcs	r3, r1
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b3c:	4659      	mov	r1, fp
 8003b3e:	00cb      	lsls	r3, r1, #3
 8003b40:	4651      	mov	r1, sl
 8003b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b46:	4651      	mov	r1, sl
 8003b48:	00ca      	lsls	r2, r1, #3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4603      	mov	r3, r0
 8003b50:	4642      	mov	r2, r8
 8003b52:	189b      	adds	r3, r3, r2
 8003b54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b56:	464b      	mov	r3, r9
 8003b58:	460a      	mov	r2, r1
 8003b5a:	eb42 0303 	adc.w	r3, r2, r3
 8003b5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b78:	4649      	mov	r1, r9
 8003b7a:	008b      	lsls	r3, r1, #2
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b82:	4641      	mov	r1, r8
 8003b84:	008a      	lsls	r2, r1, #2
 8003b86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b8a:	f7fc fb2b 	bl	80001e4 <__aeabi_uldivmod>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc8 <UART_SetConfig+0x4e4>)
 8003b94:	fba3 1302 	umull	r1, r3, r3, r2
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	2164      	movs	r1, #100	@ 0x64
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	3332      	adds	r3, #50	@ 0x32
 8003ba6:	4a08      	ldr	r2, [pc, #32]	@ (8003bc8 <UART_SetConfig+0x4e4>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	f003 020f 	and.w	r2, r3, #15
 8003bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4422      	add	r2, r4
 8003bba:	609a      	str	r2, [r3, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bc8:	51eb851f 	.word	0x51eb851f

08003bcc <memset>:
 8003bcc:	4402      	add	r2, r0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d100      	bne.n	8003bd6 <memset+0xa>
 8003bd4:	4770      	bx	lr
 8003bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bda:	e7f9      	b.n	8003bd0 <memset+0x4>

08003bdc <__libc_init_array>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	4d0d      	ldr	r5, [pc, #52]	@ (8003c14 <__libc_init_array+0x38>)
 8003be0:	4c0d      	ldr	r4, [pc, #52]	@ (8003c18 <__libc_init_array+0x3c>)
 8003be2:	1b64      	subs	r4, r4, r5
 8003be4:	10a4      	asrs	r4, r4, #2
 8003be6:	2600      	movs	r6, #0
 8003be8:	42a6      	cmp	r6, r4
 8003bea:	d109      	bne.n	8003c00 <__libc_init_array+0x24>
 8003bec:	4d0b      	ldr	r5, [pc, #44]	@ (8003c1c <__libc_init_array+0x40>)
 8003bee:	4c0c      	ldr	r4, [pc, #48]	@ (8003c20 <__libc_init_array+0x44>)
 8003bf0:	f000 f818 	bl	8003c24 <_init>
 8003bf4:	1b64      	subs	r4, r4, r5
 8003bf6:	10a4      	asrs	r4, r4, #2
 8003bf8:	2600      	movs	r6, #0
 8003bfa:	42a6      	cmp	r6, r4
 8003bfc:	d105      	bne.n	8003c0a <__libc_init_array+0x2e>
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c04:	4798      	blx	r3
 8003c06:	3601      	adds	r6, #1
 8003c08:	e7ee      	b.n	8003be8 <__libc_init_array+0xc>
 8003c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c0e:	4798      	blx	r3
 8003c10:	3601      	adds	r6, #1
 8003c12:	e7f2      	b.n	8003bfa <__libc_init_array+0x1e>
 8003c14:	08003c64 	.word	0x08003c64
 8003c18:	08003c64 	.word	0x08003c64
 8003c1c:	08003c64 	.word	0x08003c64
 8003c20:	08003c68 	.word	0x08003c68

08003c24 <_init>:
 8003c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c26:	bf00      	nop
 8003c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2a:	bc08      	pop	{r3}
 8003c2c:	469e      	mov	lr, r3
 8003c2e:	4770      	bx	lr

08003c30 <_fini>:
 8003c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c32:	bf00      	nop
 8003c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c36:	bc08      	pop	{r3}
 8003c38:	469e      	mov	lr, r3
 8003c3a:	4770      	bx	lr
